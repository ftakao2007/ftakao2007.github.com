<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Octopress Blog]]></title>
  <link href="http://ftakao2007.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://ftakao2007.github.com/"/>
  <updated>2013-05-06T18:04:57+09:00</updated>
  <id>http://ftakao2007.github.com/</id>
  <author>
    <name><![CDATA[ftakao2007]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[heroku]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/27/heroku/"/>
    <updated>2013-04-27T06:07:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/27/heroku</id>
    <content type="html"><![CDATA[<h2 id="初期設定例">初期設定例</h2>

<p>公式そのまま</p>

<p><code>bash
git clone git://github.com/heroku/ruby-sample.git
cd ruby-sample
heroku create
git push heroku master
heroku open
</code></p>

<h3 id="ruby-sampleに入っているファイル">ruby-sampleに入っているファイル</h3>

<p><code>ruby Gemfile
source :rubygems
gem 'sinatra', '1.1.0'
gem 'thin'
</code></p>

<p>``` ruby Gemfile.lock
GEM
  remote: http://rubygems.org/
  specs:</p>

<pre><code>daemons (1.1.9)
eventmachine (0.12.10)
rack (1.4.1)
sinatra (1.1.0)
  rack (~&gt; 1.1)
  tilt (~&gt; 1.1)
thin (1.4.1)
  daemons (&gt;= 1.0.9)
  eventmachine (&gt;= 0.12.6)
  rack (&gt;= 1.0.0)
tilt (1.3.3)
</code></pre>

<p>PLATFORMS
  ruby</p>

<p>DEPENDENCIES
  sinatra (= 1.1.0)
  thin
```</p>

<p><code>bash Procfile
web: bundle exec ruby web.rb -p $PORT
</code></p>

<p>``` ruby web.rb
require 'sinatra'</p>

<p>get '/' do
  "Hello, world"
end
```</p>

<h3 id="heroku+create+したあとにheroku上にできたもの">heroku create したあとにheroku上にできたもの</h3>

<p>limitless-hollows-2098のリンク</p>

<h3 id="git+push+heroku+master+したあとにheroku上にできたもの">git push heroku master したあとにheroku上にできたもの</h3>

<p>limitless-hollows-2098のリンク先「Dynos」<code>web bundle exec ruby web.rb -p $PORT</code>の項目</p>

<hr />

<h2 id="HerokuにRedmineをインストール">HerokuにRedmineをインストール</h2>

<p><a href="http://rochefort.hatenablog.com/entry/20130107/p1">Redmineをherokuにデプロイする</a>
この手順を参考に</p>

<h3 id="手順以外にやったこと">手順以外にやったこと</h3>

<ul>
<li><p>パッケージをインストール(CentOS6.4)
<code>bash
sudo yum install mysql-devel ImageMagick ImageMagick-devel postgresql
</code>
これをやらないと<code>bundle install</code>でエラーになる<br/>
その他エラーが出る場合は、メッセージをググって適宜必要なパッケージをyumで入れればいいと思う。</p></li>
<li><p>以下のエラーがでたのでknown_hostsをリセット<br/>
<code>bash
! [remote rejected] 2.1-stable -&gt; master (pre-receive hook declined)
</code>
~/.ssh 配下のknown_hostsを適当にリネームしました。</p></li>
</ul>


<p>ここでインストールは終了</p>

<ul>
<li>パスワード変更
デフォルトはadmin:adminなのでパスワードを変更<br/>
言語を日本語にしてタイムゾーンをTokyoに変更</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-command]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/10/git-command/"/>
    <updated>2013-04-10T20:13:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/10/git-command</id>
    <content type="html"><![CDATA[<h2 id="git+init">git init</h2>

<h1 id="リポジトリとのやりとり関連コマンド">リポジトリとのやりとり関連コマンド</h1>

<h2 id="fetch,+marge,+push">fetch, marge, push</h2>

<p><a href="http://dqn.sakusakutto.jp/2012/11/git_pull.html">Git pullを使うべきでない３つの理由</a>によると
リモートリポジトリとやり取りするときは以下のコマンドを使えれば問題ないみたい。</p>

<table>
<thead>
<tr>
<th align="center">コマンド</th>
<th align="center">意味</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">fetch</td>
<td align="center">ダウンロード</td>
</tr>
<tr>
<td align="center">marge</td>
<td align="center">2つのブランチを統合</td>
</tr>
<tr>
<td align="center">push</td>
<td align="center">アップロード</td>
</tr>
</tbody>
</table>


<p>pullを使うのはfetchした後margeするのがめんどくさく感じるようになった時。</p>

<h3 id="fetch,+marge">fetch, marge</h3>

<p><a href="http://qiita.com/items/e082d64f3f8b424e9b7d">fetch と pullの違い</a></p>

<h3 id="push">push</h3>

<h1 id="戻し、削除関連">戻し、削除関連</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitメモ]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/07/git/"/>
    <updated>2013-04-07T22:57:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/07/git</id>
    <content type="html"><![CDATA[<h1 id="メモ書き">メモ書き</h1>

<p>コンセプトは、曖昧に覚えていることをとりあえず書き出し、修正しながら身につける。</p>

<h2 id="リモートリポジトリ">リモートリポジトリ</h2>

<ul>
<li>gitサーバ側に作成されるリポジトリ。クライアント側から作成することはできない。</li>
<li>このリポジトリが無いとpushできない</li>
</ul>


<h2 id="master">master</h2>

<ul>
<li>masterのブランチ</li>
<li><code>git commit -m "hoge"</code> のように、commitを初めてした時に自動で作成される</li>
<li>ブランチは <code>git branch</code> で確認可能</li>
</ul>


<h2 id="origin">origin</h2>

<ul>
<li>URLのエイリアスみたいなもの</li>
<li><code>git remote add origin https://github.com/ftakao2007/test.git</code> で後ろのURLが登録される</li>
<li>リポジトリごとに異なる</li>
<li>以下herokuの例
<code>bash
fukui-no-MacBook-Air:h ftakao2007$ git remote -v
heroku  git@heroku.com:quiet-tor-2376.git (fetch)
heroku  git@heroku.com:quiet-tor-2376.git (push)
origin  git://github.com/heroku/ruby-sample.git (fetch)
origin  git://github.com/heroku/ruby-sample.git (push)
</code></li>
</ul>


<h1 id="とりあえず手っ取り早くgitを使いたい">とりあえず手っ取り早くgitを使いたい</h1>

<h2 id="初期設定">初期設定</h2>

<h3 id="まっさらなremoteリポジトリの場合">まっさらなremoteリポジトリの場合</h3>

<p><code>bash
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/ftakao2007/test.git
git push -u origin master
</code></p>

<h3 id="いろいろ使われているremoteリポジトリをローカルに持ってきて使う場合">いろいろ使われているremoteリポジトリをローカルに持ってきて使う場合</h3>

<p><code>bash
git clone https://github.com/ftakao2007/test.git
cd test
</code></p>

<h2 id="編集">編集</h2>

<h3 id="リモートにプッシュ">リモートにプッシュ</h3>

<p><code>bash
vi munin_construct.py
git add munin_construct.py
git status
git commit -m 'Commit test'
git pull --rebase origin
git push origin
</code></p>

<h2 id="ブランチ">ブランチ</h2>

<h3 id="作成、確認、切り替え、コミット、プッシュ">作成、確認、切り替え、コミット、プッシュ</h3>

<p>``` bash
fukui-no-MacBook-Air:test2 ftakao2007$ git branch
* master</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git branch test-branch</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git branch
* master
  test-branch</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git checkout test-branch
Switched to branch 'test-branch'</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git branch
  master
* test-branch</p>

<p>vi hoge.txt
git status
git add hoge.txt
git status
git commit -m "hoge"
git push -u origin test-branch
git checkout master
```</p>

<h2 id="削除">削除</h2>

<h3 id="ローカルのブランチの削除">ローカルのブランチの削除</h3>

<p>``` bash
fukui-no-MacBook-Air:test2 ftakao2007$ git branch
* master
  test-branch</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git branch -D test-branch
Deleted branch test-branch (was 19b1e03).</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git branch
* master
```</p>

<h3 id="リモートのブランチ削除">リモートのブランチ削除</h3>

<p>``` bash
fukui-no-MacBook-Air:test2 ftakao2007$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/test-branch</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git push origin :test-branch     ※コロンをつける
Username:
Password:
To https://github.com/ftakao2007/test2.git
 - [deleted]         test-branch</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
```</p>

<h3 id="コミットの取り消し">コミットの取り消し</h3>

<p>``` bash
fukui-no-MacBook-Air:test2 ftakao2007$ git log
commit f56ca7da10d119fd91fb5f7d1c4799d94f525a91
Author: ftakao2007 <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#58;&#102;&#116;&#97;&#107;&#97;&#x6f;&#50;&#x30;&#48;&#x37;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#102;&#116;&#97;&#x6b;&#97;&#111;&#50;&#x30;&#48;&#55;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a>
Date:   Wed Apr 10 22:41:52 2013 +0900</p>

<pre><code>a
</code></pre>

<p>commit 3c63dc839b68e5753da4ab69330e465b31dd17c2
Author: ftakao2007 <a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#102;&#116;&#97;&#107;&#x61;&#x6f;&#50;&#48;&#x30;&#55;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#109;">&#x66;&#x74;&#97;&#107;&#x61;&#x6f;&#x32;&#x30;&#48;&#x37;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;</a>
Date:   Wed Apr 10 22:37:36 2013 +0900</p>

<pre><code>hoge
</code></pre>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git reset --soft HEAD^</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git log
commit 3c63dc839b68e5753da4ab69330e465b31dd17c2
Author: ftakao2007 <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x66;&#x74;&#97;&#x6b;&#97;&#x6f;&#50;&#48;&#48;&#x37;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#109;">&#x66;&#116;&#97;&#x6b;&#97;&#111;&#50;&#x30;&#48;&#x37;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#109;</a>
Date:   Wed Apr 10 22:37:36 2013 +0900</p>

<pre><code>hoge
</code></pre>

<p><code>``
</code>git reset --hard HEAD<sup>`</sup> にすると、コミットの取り消しと同時にファイルの内容もコミット前に戻る。</p>

<h3 id="[originのurlを変更する](http://d.hatena.ne.jp/wats/20100915/1284478558)"><a href="http://d.hatena.ne.jp/wats/20100915/1284478558">originのurlを変更する</a></h3>

<p><code>git remote set-url origin &lt;新しいリポジトリURL&gt;</code></p>

<h2 id="今後確認すること">今後確認すること</h2>

<ul>
<li>リビジョンてどうなってるの？ぱっとググった感じリビジョンて概念を使わない？世代を超えたファイルのdiffってできないのかな。</li>
<li>Webでdiffしたら文字化けしてる？</li>
</ul>


<h2 id="README.md">README.md</h2>

<p><a href="http://kuroigamen.com/13">gituhub に自分のプロジェクトのリポジトリを作ってみる。</a></p>

<h2 id="リンク">リンク</h2>

<ul>
<li><a href="http://lealog.hateblo.jp/entry/2012/12/22/023547">最低限の知識でGitの運用をする</a></li>
<li><a href="http://havelog.ayumusato.com/develop/git/e513-git_branch_model.html">ぼくが実際に運用していたGitブランチモデルについて</a></li>
<li><a href="http://d.hatena.ne.jp/tt_clown/touch/20130412/git_management">git の運用指針</a></li>
<li><a href="http://d.hatena.ne.jp/viver/touch/20110402/p1">Webサイトをgithubで管理してpush時に自動的に同期する方法</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
