<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: statistics | Octopress Blog]]></title>
  <link href="http://ftakao2007.github.com/blog/categories/statistics/atom.xml" rel="self"/>
  <link href="http://ftakao2007.github.com/"/>
  <updated>2013-06-02T10:52:40+09:00</updated>
  <id>http://ftakao2007.github.com/</id>
  <author>
    <name><![CDATA[ftakao2007]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第17回 granpark.rb 「データ解析技術入門(R言語編)」]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/05/11/granpark-17th/"/>
    <updated>2013-05-11T12:52:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/05/11/granpark-17th</id>
    <content type="html"><![CDATA[<p><a href="http://www.zusaar.com/event/670003">第17回 granpark.rb 「データ解析技術入門(R言語編)」</a></p>

<h2 id="値代入">値代入</h2>

<p>```</p>

<blockquote><p>a &lt;- 5
d &lt;- "abc"</p>

<p>a
[1] 5</p>

<p>d
[1] "abc"
```
代入には「=」も使えるが、Rは慣例的に「&lt;-」を使う。</p></blockquote>

<h2 id="ベクトル計算">ベクトル計算</h2>

<p>「c」を使う
```</p>

<blockquote><p>a &lt;- c(1,2,3)
a
[1] 1 2 3
b &lt;- c(4,5,6)
a+b
[1] 5 7 9
```</p></blockquote>

<h2 id="行列計算">行列計算</h2>

<p>「matrix」を使う<br/>
3行4列の行列に1から12までの数値が入っている例
```</p>

<blockquote><p>matrix(1:12,3,4)</p>

<pre><code> [,1] [,2] [,3] [,4]
</code></pre>

<p>[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12</p>

<p>a &lt;- matrix(1:12,3,4)
a</p>

<pre><code> [,1] [,2] [,3] [,4]
</code></pre>

<p>[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12</p>

<p>a[1,]
[1]  1  4  7 10</p>

<p>a[,1]
[1] 1 2 3</p>

<p>a[1,1]
[1] 1</p>

<p>a[1,1] * a[1,2]
[1] 4</p>

<p>a[3,1] * a[1,2]
[1] 12
```</p></blockquote>

<h2 id="irisを使ったRの基本的利用方法">irisを使ったRの基本的利用方法</h2>

<p>アヤメのガクヘン(蕚片)と花びらに関するデータ</p>

<p>```</p>

<blockquote><p>iris</p>

<pre><code>Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
</code></pre>

<p>1            5.1         3.5          1.4         0.2     setosa
2            4.9         3.0          1.4         0.2     setosa
...</p>

<p>summary(iris)
  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width<br/>
 Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100
 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300
 Median :5.800   Median :3.000   Median :4.350   Median :1.300
 Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199
 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800
 Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500</p>

<pre><code>   Species 
</code></pre>

<p> setosa    :50
 versicolor:50
 virginica :50</p>

<p>sum(iris[,1])  合計
[1] 876.5</p>

<p>mean(iris[,1])　平均
[1] 5.843333</p>

<p>sd(iris[,1])　　標準偏差
[1] 0.8280661</p>

<p>max(iris[,1])　最大
[1] 7.9</p>

<p>min(iris[,1])　最小
[1] 4.3</p>

<p>str(iris[,1])
 num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...</p>

<p>str(iris)　データに関する情報
'data.frame':     150 obs. of  5 variables:
 $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
 $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
 $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
 $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
 $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 …</p></blockquote>

<p>data.frame…変数の型
```</p>

<h2 id="図形描画">図形描画</h2>

<p>```</p>

<blockquote><p>plot(iris[,1],iris[,3])</p>

<p>plot(iris)</p>

<p>pairs(iris[1:4], pch=21, bg=c("red", "green3","blue"))
```</p></blockquote>

<h2 id="相関を見る">相関を見る</h2>

<p>```</p>

<blockquote><p>cor(iris[,1:4])</p>

<pre><code>         Sepal.Length Sepal.Width Petal.Length Petal.Width
</code></pre>

<p>Sepal.Length    1.0000000  -0.1175698    0.8717538   0.8179411
Sepal.Width    -0.1175698   1.0000000   -0.4284401  -0.3661259
Petal.Length    0.8717538  -0.4284401    1.0000000   0.9628654
Petal.Width     0.8179411  -0.3661259    0.9628654   1.0000000</p></blockquote>

<p>```
同じ値は1になる</p>

<h2 id="単回帰分析">単回帰分析</h2>

<p>```</p>

<blockquote><p>kaiki &lt;- lm(iris$Petal.Length ~ iris$Sepal.Length)
kaiki</p></blockquote>

<p>Call:
lm(formula = iris$Petal.Length ~ iris$Sepal.Length)</p>

<p>Coefficients:</p>

<pre><code>  (Intercept)  iris$Sepal.Length 
       -7.101              1.858 
</code></pre>

<p>単回帰直線が
y=1.858, x=-7.101
という意味</p>

<blockquote><p>plot(iris$Petal.Length ~ iris$Sepal.Length)
```</p></blockquote>

<h2 id="Rの掟">Rの掟</h2>

<ul>
<li><p>for, if, while, repeat, 添字操作は遅くなるのでなるべくやらない</p></li>
<li><p>添字操作は添字集合による論理判断させる<br/>
添字一つではなく、ある条件の集合体として操作させる<br/>
→それによってできた添字集合は逐次の論理判断と等価</p></li>
</ul>


<h3 id="問題">問題</h3>

<p>```</p>

<blockquote><p>x &lt;- runif(1000000)</p>

<p>test1 &lt;- function() {
+ res &lt;- numeric(1000000)
+ for (i in 1:1000000) res[i] &lt;- exp(x[i])
+ return(res)}
system.time(test1())
   ユーザ   システム       経過</p>

<pre><code> 2.089      0.013      2.102 
</code></pre></blockquote>

<p>```
これを速くする</p>

<h3 id="答え">答え</h3>

<p>```</p>

<blockquote><p>x &lt;- runif(1000000)
system.time(res &lt;-exp(x))
   ユーザ   システム       経過</p>

<pre><code> 0.013      0.002      0.016
</code></pre>

<p>```
できるだけコードを書かずに計算する方法を考えるとだいたい正解</p></blockquote>

<h2 id="Rメモ">Rメモ</h2>

<ul>
<li>C++で実装されている</li>
<li><p>ifやforを使いすぎるとRubyやPerlより遅くなるが、ちゃんとやるとC++くらい速い<br/>
ifやループは使わない事に喜びをおぼえてきたら立派なR使い。<br/>
使うべきところは使ってもよい。</p></li>
<li><p>エクセルより大きなデータを扱える</p></li>
<li>拡張パッケージがいろいろある</li>
<li>メモリー容量内の範囲で使える</li>
<li>「R」は検索しにくい(Rubyとかのほうがヒットする)</li>
<li><p>メガ、ギガクラスの処理はRでよい
→それより大きくなるとHive</p></li>
<li><p>Rstudioを入れると、WebブラウザでRが使える
→エディタや描画や関数など別窓で表示させられる<br/>
→iPadでRが使えるらしい</p></li>
</ul>


<h2 id="その他">その他</h2>

<ul>
<li>何かを計算する場合、テールの部分の情報は必要なのかを考えると良い<br/>
データが全部必要なのか、一部あればよいのか考慮することで計算量を少なくすることができる可能性がある</li>
</ul>

]]></content>
  </entry>
  
</feed>
