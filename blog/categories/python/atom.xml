<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Octopress Blog]]></title>
  <link href="http://ftakao2007.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://ftakao2007.github.com/"/>
  <updated>2013-06-02T10:32:31+09:00</updated>
  <id>http://ftakao2007.github.com/</id>
  <author>
    <name><![CDATA[ftakao2007]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[エキスパートPythonプログラミング]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/06/02/expert-python-programming/"/>
    <updated>2013-06-02T01:39:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/06/02/expert-python-programming</id>
    <content type="html"><![CDATA[<p>辞書的に使ってしらべたことから覚書。</p>

<table border="0" cellpadding="0" cellspacing="0"><tr><td valign="top"><div style="border:1px solid;margin:0px;padding:6px 0px;width:160px;text-align:center;float:left"><a href="http://hb.afl.rakuten.co.jp/hgc/0855d2c2.97054871.0855d2c3.c2844246/?pc=http%3a%2f%2fitem.rakuten.co.jp%2fbook%2f6497309%2f%3fscid%3daf_link_tbl&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fbook%2fi%2f13678877%2f" target="_blank"><img src="http://hbb.afl.rakuten.co.jp/hgb/?pc=http%3a%2f%2fthumbnail.image.rakuten.co.jp%2f%400_mall%2fbook%2fcabinet%2f0486%2f04868629.jpg%3f_ex%3d128x128&amp;m=http%3a%2f%2fthumbnail.image.rakuten.co.jp%2f%400_mall%2fbook%2fcabinet%2f0486%2f04868629.jpg%3f_ex%3d80x80" alt="【送料無料】エキスパートPythonプログラミング [ タレク・ジアデ ]" border="0" style="margin:0px;padding:0px"></a><p style="font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px"><a href="http://hb.afl.rakuten.co.jp/hgc/0855d2c2.97054871.0855d2c3.c2844246/?pc=http%3a%2f%2fitem.rakuten.co.jp%2fbook%2f6497309%2f%3fscid%3daf_link_tbl&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fbook%2fi%2f13678877%2f" target="_blank">【送料無料】エキスパートPythonプログラミング [ タレク・ジアデ ]</a><br></p></div></td></tr></table>


<h2 id="2.3+デコレータ">2.3 デコレータ</h2>

<ul>
<li>Python2.4で追加された構文</li>
<li>関数やメソッドのラッピング処理(受け取った関数を拡張して返す)の見た目をわかりやすくする</li>
<li>クラスメソッドや静的なメソッドを定義する際に、メソッド定義の前の行にすっきりと書く事が目的</li>
<li>いくつかのコードパターンを実装するときに非常に意図がわかりやすいコードになる</li>
</ul>


<h3 id="2.3.1+デコレータの書き方">2.3.1 デコレータの書き方</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python単語帳]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/05/25/python-words/"/>
    <updated>2013-05-25T14:54:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/05/25/python-words</id>
    <content type="html"><![CDATA[<p>感覚だけのプログラミングでは他人と意思疎通ができないので単語を抑えたい。</p>

<h2 id="[リスト、タプル、ディクショナリ、リスト](http://ftakao2007.github.io/blog/2013/04/29/python/)"><a href="http://ftakao2007.github.io/blog/2013/04/29/python/">リスト、タプル、ディクショナリ、リスト</a></h2>

<h2 id="デコレータ">デコレータ</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(第31回)Python mini Hack-a-thon]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/05/18/python-mini-hack-a-thon/"/>
    <updated>2013-05-18T11:37:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/05/18/python-mini-hack-a-thon</id>
    <content type="html"><![CDATA[<p>おのおのが好きな事を好きなようにやるハッカソン。
実際に自分の手を動かすのは楽しいですね。</p>

<h2 id="ストレージ拡張自動化システム検討">ストレージ拡張自動化システム検討</h2>

<p>日本人のみ相手に仕事をしている場合は、わからないことがあれば話をしながら進めることができるが、
海外も視野に入れると時差も休日も言語も違い、これを話しながら進めるのは現実的ではない。</p>

<p>Webフォームから値を入力するとバッチ処理で自動的にストレージ(NAS)の拡張ができるシステム構築を目指す。</p>

<p><img class="center" src="https://dl.dropboxusercontent.com/u/37468049/PythonSystem.png"></p>

<ul>
<li><p>Webサーバ<br/>
Pythonのフレームワークを利用してWebの入力フォームを作成。
NAS名やボリューム名、拡張サイズを入力する。</p></li>
<li><p>バッチサーバ<br/>
cronなどジョブスケジューラーを利用してWebフォームで入力された値に従ってバッチ処理を行う。<br/>
fabricを利用予定。</p></li>
<li><p>NAS管理サーバ<br/>
既存のNASを管理しているサーバ。こちらには新たに設定を追加せず、fabricを利用して
バッチサーバからssh経由で送られてきたコマンドを自動で実行するようにしたい。</p></li>
<li><p>NASサーバ<br/>
拡張対象のNASサーバ</p></li>
</ul>


<h2 id="バッチサーバ">バッチサーバ</h2>

<h3 id="[fabricインストール](http://ftakao2007.github.io/blog//2013/04/06/fabric/)"><a href="http://ftakao2007.github.io/blog//2013/04/06/fabric/">fabricインストール</a></h3>

<p>Amazon Linuxは以下でインストール可能</p>

<p><code>bash
sudo su
yum -y install python python-devel gcc
curl http://python-distribute.org/distribute_setup.py | python
curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python
pip install fabric fexpect
exit
</code></p>

<h3 id="Python自動実行スクリプト作成">Python自動実行スクリプト作成</h3>

<ul>
<li><a href="https://github.com/ftakao2007/python_json">python_json (github)</a></li>
</ul>


<p>まだfabricは絡んでおらず、printでコマンドを書き出しているのみ。</p>

<p>jsonファイル中身
``` bash NAS_param.json
[</p>

<pre><code>{
    "nas": "(NAS Name)",
    "volume": "(Volume Name)",
    "size": "(Volume size)"
},
{
    "nas": "nas_backup01",
    "volume": "apache_log",
    "size": "+5g"
},
{
    "nas": "nas_backup02",
    "volume": "tomcat_log",
    "size": "+500m"
},
{
    "nas": "nas_ecsite01",
    "volume": "item_image",
    "size": "+10g"
}
</code></pre>

<p>]
```</p>

<p>これを読み込んで処理する。</p>

<p>``` python read_NAS_param.py</p>

<h1 id="!/usr/bin/python">!/usr/bin/python</h1>

<h1 id="coding:+utf-8">coding: utf-8</h1>

<p>import json # jsonを扱うため
import sys  # モジュール属性 argv を取得するため</p>

<p>argvs = sys.argv  # コマンドライン引数を格納したリストの取得
argc = len(argvs) # 引数の個数</p>

<p>f = open("NAS_param.json")  # jsonファイルを読み込む
data = json.load(f)         # jsonデータを読み込んだファイルオブジェクトからPythonデータを作成
f.close()                   # ファイルを閉じる</p>

<p>num = len(data)             #ファイル数をカウント</p>

<p>if argc == 2 and argvs[1] == "--help":</p>

<pre><code>print( "sudo ssh {obj[nas]} vol resize {obj[volume]} {obj[size]}".format(obj = data[0]) )    # ヘルプを表示
</code></pre>

<p>if argc == 1:</p>

<pre><code>for i in range(num)[1:]:     # 配列の2列目から実行
    print( "sudo ssh {obj[nas]} vol resize {obj[volume]} {obj[size]}".format(obj = data[i]) )
</code></pre>

<p>※ デバッグ等コメントは削除
<code>``
ハッカソン中は引数が無いとエラーになっていたが、上記のように</code>argc == 2 and`を追加するとうまく実行できるようになった。</p>

<p>以下実行結果
``` bash
fukui-no-MacBook-Air:python_json ftakao2007$ ./read_NAS_param.py --help
sudo ssh (NAS Name) vol create (Volume Name) (Volume size)</p>

<p>fukui-no-MacBook-Air:python_json ftakao2007$ ./read_NAS_param.py
sudo ssh nas_backup01 vol create apache_log 5g
sudo ssh nas_backup02 vol create tomcat_log 500m
sudo ssh nas_ecsite01 vol create item_image 10g
```
Helpも実行結果も問題なく表示された。</p>

<h2 id="Webサーバ">Webサーバ</h2>

<h3 id="w3mインストール">w3mインストール</h3>

<p>動作確認用
<code>bash
yum install w3m
</code></p>

<h3 id="Bottle+インストール">Bottle インストール</h3>

<p>Djangoが難しかったのでこっちを使ってみた</p>

<ul>
<li><a href="http://mojix.org/2013/01/04/python-bottle">Pythonを始めるなら、１ファイルの軽量Webフレームワーク「Bottle」がおすすめ</a></li>
</ul>


<p>```bash
wget https://pypi.python.org/packages/source/b/bottle/bottle-0.11.4.tar.gz
tar zxvf cd bottle-0.11.4.tar.gz
cd bottle-0.11.4</p>

<h1 id="vi+hello.py">vi hello.py</h1>

<p>from bottle import route, run</p>

<p>@route('/hello')
def hello():
  return "Hello World!"</p>

<h1 id="run(host='localhost',+port=8080,+debug=True)">run(host='localhost', port=8080, debug=True)</h1>

<p>python hello.py &amp;
w3m http://localhost:8080/hello
```
以下のようにするとPCのWebブラウザからリモートアクセスできた。</p>

<p><code>bash
run(host='ec2-XXX-XXX-XXX-XXX.ap-northeast-1.compute.amazonaws.com', port=80, debug=True)
sudo python hello.py  #この場合はsudoで実行
</code></p>

<hr />

<p>※ 以下挫折中 ※</p>

<h2 id="httpdインストール">httpdインストール</h2>

<p><code>bash
sudo yum -y update
sudo yum -y install httpd
</code></p>

<h2 id="Django+インストール">Django インストール</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/CortYuming/20120503/p1">Django1.4 + mod_wsgi 環境構築とりあえずのメモ</a></li>
<li><a href="http://hima-j.in/django/django-setup/">Django のインストールからプロジェクトの作成まで</a>
<code>bash
sudo yum install mod_wsgi
sudo pip install django
sudo mkdir /var/www/html/django
cd /var/www/html/django
sudo django-admin.py startproject mysite
</code></li>
</ul>


<h3 id="開発用サーバの起動と確認">開発用サーバの起動と確認</h3>

<p>SGの設定で8080ポートを開けておく</p>

<p>``` bash
cd mysite
python manage.py runserver 8080 &amp;
w3m http://127.0.0.1:8080</p>

<p>※ 「It worked!」が出れば成功
```</p>

<p>〜つづく〜</p>

<h2 id="その他">その他</h2>

<p>Zaimの家計簿自動入力スクリプトの作成もやりたかった。現在は認証のとろころで詰まってます。ググって自力でできるかなぁ。
できなかったら、次回はその辺やってみて有識者の知恵を拝借できればと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonプロフェッショナルプログラミング]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/05/02/python-professional-programing/"/>
    <updated>2013-05-02T05:27:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/05/02/python-professional-programing</id>
    <content type="html"><![CDATA[<p>プログラミングをしている時に気になったことを素早く本で調べられるように
まとめようと思います。OSなど本書と私の環境は異なっています。</p>

<table border="0" cellpadding="0" cellspacing="0"><tr><td valign="top"><div style="border:1px solid;margin:0px;padding:6px 0px;width:160px;text-align:center;float:left"><a href="http://hb.afl.rakuten.co.jp/hgc/0855d2c2.97054871.0855d2c3.c2844246/?pc=http%3a%2f%2fitem.rakuten.co.jp%2fbook%2f11631269%2f%3fscid%3daf_link_tbl&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fbook%2fi%2f15825336%2f" target="_blank"><img src="http://hbb.afl.rakuten.co.jp/hgb/?pc=http%3a%2f%2fthumbnail.image.rakuten.co.jp%2f%400_mall%2fbook%2fcabinet%2f2948%2f9784798032948.jpg%3f_ex%3d128x128&amp;m=http%3a%2f%2fthumbnail.image.rakuten.co.jp%2f%400_mall%2fbook%2fcabinet%2f2948%2f9784798032948.jpg%3f_ex%3d80x80" alt="【送料無料】Pythonプロフェッショナルプログラミング [ ビープラウド ]" border="0" style="margin:0px;padding:0px"></a><p style="font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px"><a href="http://hb.afl.rakuten.co.jp/hgc/0855d2c2.97054871.0855d2c3.c2844246/?pc=http%3a%2f%2fitem.rakuten.co.jp%2fbook%2f11631269%2f%3fscid%3daf_link_tbl&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fbook%2fi%2f15825336%2f" target="_blank">【送料無料】Pythonプロフェッショナルプログラミング [ ビープラウド ]</a><br></p></div></td></tr></table>


<h2 id="Pythonをはじめよう">Pythonをはじめよう</h2>

<p>Pythonの初期設定についての解説。ここではAmazonLinuxで環境を構築する。</p>

<h3 id="必要パッケージのインストール">必要パッケージのインストール</h3>

<p>必要なものがあれば随時追加していく
``` bash
sudo yum -y install python27</p>

<p>[ec2-user@ip-10-148-166-193 ~]$ python -V
Python 2.6.8
[ec2-user@ip-10-148-166-193 ~]$ python27 -V
Python 2.7.3</p>

<p>※ デフォルトは2.6系、明示的にインストールすると2.7系も入る
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zaim]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/29/zaim/"/>
    <updated>2013-04-29T16:50:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/29/zaim</id>
    <content type="html"><![CDATA[<p><a href="http://zaim.net/">zaim</a>は無料の家計簿サービス。家で一日の収支を家計簿にまとめるのは大変な作業ですが、このサービスを利用すると買い物をした直後にスマートフォンやタブレットで家計簿をつけることができます。その場その場で収支を書き込めるので面倒くさがりの私でも継続的に家計簿をつけることができています。この様なサービスをつくれればつくりたいなと思っていたのですが、zaimという素晴らしいサービスがありましたので利用させていただいています。</p>

<h2 id="固定費入力の自動化">固定費入力の自動化</h2>

<p>固定費の入力ですが、正直できていません。細かく税金や給料など毎月確認したいなあとは思っているのですが、なかなか腰を据えて入力する気がどうしてもおこらないのです。</p>

<p>そこで、最近勉強し始めたPythonを利用して入力を自動化することを検討してます。
カード会社や銀行のデータをテキストで落としてきて、それを処理してzaimのAPIを利用して入力する方法を考えようと思います。他によい解決方法やよいソフトがあればらそちらを利用してこの開発はストップする可能性もあります。</p>

<h2 id="[Zaim+developers+β](https://dev.zaim.net/)"><a href="https://dev.zaim.net/">Zaim developers β</a></h2>

<p>ここにアプリケーションを登録するとConsumer KeyやConsumer Secretなどを得られる</p>

<h2 id="Pythonで操作">Pythonで操作</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/wwwcfe/20120511/python_requests_oauth">超便利な Python モジュール requests を使って OAuth 認証し、Zaim と連携する方法</a></li>
</ul>


<p>ここがすごく参考になりそう。</p>

<h3 id="やったこと">やったこと</h3>

<p>``` bash
[mickey@ftakao2007 zaim]$ ./get_access_token.py
Traceback (most recent call last):
  File "./get_access_token.py", line 7, in <module></p>

<pre><code>from requests.auth import OAuth1
</code></pre>

<p>ImportError: cannot import name OAuth1
```</p>

<p>このエラーがでていたのでrequestsのバージョンを指定してインストール
<code>bash
sudo pip uninstall requests
sudo pip install requests==0.14.0
</code></p>

<p>``` bash
[mickey@ftakao2007 zaim]$ ./get_access_token.py
Auth link:
Traceback (most recent call last):
  File "./get_access_token.py", line 40, in <module></p>

<pre><code>print oauth_requests()
</code></pre>

<p>  File "./get_access_token.py", line 28, in oauth_requests</p>

<pre><code>print "%s?oauth_token=%s" % (authorize_url, request_token["oauth_token"])
</code></pre>

<p>KeyError: 'oauth_token'
```</p>
]]></content>
  </entry>
  
</feed>
