<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fabric | Octopress Blog]]></title>
  <link href="http://ftakao2007.github.com/blog/categories/fabric/atom.xml" rel="self"/>
  <link href="http://ftakao2007.github.com/"/>
  <updated>2013-06-02T15:54:15+09:00</updated>
  <id>http://ftakao2007.github.com/</id>
  <author>
    <name><![CDATA[ftakao2007]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[エキスパートPythonプログラミング]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/06/02/expert-python-programming/"/>
    <updated>2013-06-02T01:39:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/06/02/expert-python-programming</id>
    <content type="html"><![CDATA[<p>辞書的に使ってしらべたことから覚書。</p>

<table border="0" cellpadding="0" cellspacing="0"><tr><td valign="top"><div style="border:1px solid;margin:0px;padding:6px 0px;width:160px;text-align:center;float:left"><a href="http://hb.afl.rakuten.co.jp/hgc/0855d2c2.97054871.0855d2c3.c2844246/?pc=http%3a%2f%2fitem.rakuten.co.jp%2fbook%2f6497309%2f%3fscid%3daf_link_tbl&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fbook%2fi%2f13678877%2f" target="_blank"><img src="http://hbb.afl.rakuten.co.jp/hgb/?pc=http%3a%2f%2fthumbnail.image.rakuten.co.jp%2f%400_mall%2fbook%2fcabinet%2f0486%2f04868629.jpg%3f_ex%3d128x128&amp;m=http%3a%2f%2fthumbnail.image.rakuten.co.jp%2f%400_mall%2fbook%2fcabinet%2f0486%2f04868629.jpg%3f_ex%3d80x80" alt="【送料無料】エキスパートPythonプログラミング [ タレク・ジアデ ]" border="0" style="margin:0px;padding:0px"></a><p style="font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px"><a href="http://hb.afl.rakuten.co.jp/hgc/0855d2c2.97054871.0855d2c3.c2844246/?pc=http%3a%2f%2fitem.rakuten.co.jp%2fbook%2f6497309%2f%3fscid%3daf_link_tbl&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fbook%2fi%2f13678877%2f" target="_blank">【送料無料】エキスパートPythonプログラミング [ タレク・ジアデ ]</a><br></p></div></td></tr></table>


<h2 id="2.3+デコレータ">2.3 デコレータ</h2>

<ul>
<li>Python2.4で追加された構文</li>
<li>関数やメソッドのラッピング処理(受け取った関数を拡張して返す)の見た目をわかりやすくする</li>
<li>クラスメソッドや静的なメソッドを定義する際に、メソッド定義の前の行にすっきりと書く事が目的</li>
<li>いくつかのコードパターンを実装するときに非常に意図がわかりやすいコードになる</li>
</ul>


<h3 id="2.3.1+デコレータの書き方">2.3.1 デコレータの書き方</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(第31回)Python mini Hack-a-thon]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/05/18/python-mini-hack-a-thon/"/>
    <updated>2013-05-18T11:37:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/05/18/python-mini-hack-a-thon</id>
    <content type="html"><![CDATA[<p>おのおのが好きな事を好きなようにやるハッカソン。
実際に自分の手を動かすのは楽しいですね。</p>

<h2 id="ストレージ拡張自動化システム検討">ストレージ拡張自動化システム検討</h2>

<p>日本人のみ相手に仕事をしている場合は、わからないことがあれば話をしながら進めることができるが、
海外も視野に入れると時差も休日も言語も違い、これを話しながら進めるのは現実的ではない。</p>

<p>Webフォームから値を入力するとバッチ処理で自動的にストレージ(NAS)の拡張ができるシステム構築を目指す。</p>

<p><img class="center" src="https://dl.dropboxusercontent.com/u/37468049/PythonSystem.png"></p>

<ul>
<li><p>Webサーバ<br/>
Pythonのフレームワークを利用してWebの入力フォームを作成。
NAS名やボリューム名、拡張サイズを入力する。</p></li>
<li><p>バッチサーバ<br/>
cronなどジョブスケジューラーを利用してWebフォームで入力された値に従ってバッチ処理を行う。<br/>
fabricを利用予定。</p></li>
<li><p>NAS管理サーバ<br/>
既存のNASを管理しているサーバ。こちらには新たに設定を追加せず、fabricを利用して
バッチサーバからssh経由で送られてきたコマンドを自動で実行するようにしたい。</p></li>
<li><p>NASサーバ<br/>
拡張対象のNASサーバ</p></li>
</ul>


<h2 id="バッチサーバ">バッチサーバ</h2>

<h3 id="[fabricインストール](http://ftakao2007.github.io/blog//2013/04/06/fabric/)"><a href="http://ftakao2007.github.io/blog//2013/04/06/fabric/">fabricインストール</a></h3>

<p>Amazon Linuxは以下でインストール可能</p>

<p><code>bash
sudo su
yum -y install python python-devel gcc
curl http://python-distribute.org/distribute_setup.py | python
curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python
pip install fabric fexpect
exit
</code></p>

<h3 id="Python自動実行スクリプト作成">Python自動実行スクリプト作成</h3>

<ul>
<li><a href="https://github.com/ftakao2007/python_json">python_json (github)</a></li>
</ul>


<p>まだfabricは絡んでおらず、printでコマンドを書き出しているのみ。</p>

<p>jsonファイル中身
``` bash NAS_param.json
[</p>

<pre><code>{
    "nas": "(NAS Name)",
    "volume": "(Volume Name)",
    "size": "(Volume size)"
},
{
    "nas": "nas_backup01",
    "volume": "apache_log",
    "size": "+5g"
},
{
    "nas": "nas_backup02",
    "volume": "tomcat_log",
    "size": "+500m"
},
{
    "nas": "nas_ecsite01",
    "volume": "item_image",
    "size": "+10g"
}
</code></pre>

<p>]
```</p>

<p>これを読み込んで処理する。</p>

<p>``` python read_NAS_param.py</p>

<h1 id="!/usr/bin/python">!/usr/bin/python</h1>

<h1 id="coding:+utf-8">coding: utf-8</h1>

<p>import json # jsonを扱うため
import sys  # モジュール属性 argv を取得するため</p>

<p>argvs = sys.argv  # コマンドライン引数を格納したリストの取得
argc = len(argvs) # 引数の個数</p>

<p>f = open("NAS_param.json")  # jsonファイルを読み込む
data = json.load(f)         # jsonデータを読み込んだファイルオブジェクトからPythonデータを作成
f.close()                   # ファイルを閉じる</p>

<p>num = len(data)             #ファイル数をカウント</p>

<p>if argc == 2 and argvs[1] == "--help":</p>

<pre><code>print( "sudo ssh {obj[nas]} vol resize {obj[volume]} {obj[size]}".format(obj = data[0]) )    # ヘルプを表示
</code></pre>

<p>if argc == 1:</p>

<pre><code>for i in range(num)[1:]:     # 配列の2列目から実行
    print( "sudo ssh {obj[nas]} vol resize {obj[volume]} {obj[size]}".format(obj = data[i]) )
</code></pre>

<p>※ デバッグ等コメントは削除
<code>``
ハッカソン中は引数が無いとエラーになっていたが、上記のように</code>argc == 2 and`を追加するとうまく実行できるようになった。</p>

<p>以下実行結果
``` bash
fukui-no-MacBook-Air:python_json ftakao2007$ ./read_NAS_param.py --help
sudo ssh (NAS Name) vol create (Volume Name) (Volume size)</p>

<p>fukui-no-MacBook-Air:python_json ftakao2007$ ./read_NAS_param.py
sudo ssh nas_backup01 vol create apache_log 5g
sudo ssh nas_backup02 vol create tomcat_log 500m
sudo ssh nas_ecsite01 vol create item_image 10g
```
Helpも実行結果も問題なく表示された。</p>

<h2 id="Webサーバ">Webサーバ</h2>

<h3 id="w3mインストール">w3mインストール</h3>

<p>動作確認用
<code>bash
yum install w3m
</code></p>

<h3 id="Bottle+インストール">Bottle インストール</h3>

<p>Djangoが難しかったのでこっちを使ってみた</p>

<ul>
<li><a href="http://mojix.org/2013/01/04/python-bottle">Pythonを始めるなら、１ファイルの軽量Webフレームワーク「Bottle」がおすすめ</a></li>
</ul>


<p>```bash
wget https://pypi.python.org/packages/source/b/bottle/bottle-0.11.4.tar.gz
tar zxvf cd bottle-0.11.4.tar.gz
cd bottle-0.11.4</p>

<h1 id="vi+hello.py">vi hello.py</h1>

<p>from bottle import route, run</p>

<p>@route('/hello')
def hello():
  return "Hello World!"</p>

<h1 id="run(host='localhost',+port=8080,+debug=True)">run(host='localhost', port=8080, debug=True)</h1>

<p>python hello.py &amp;
w3m http://localhost:8080/hello
```
以下のようにするとPCのWebブラウザからリモートアクセスできた。</p>

<p><code>bash
run(host='ec2-XXX-XXX-XXX-XXX.ap-northeast-1.compute.amazonaws.com', port=80, debug=True)
sudo python hello.py  #この場合はsudoで実行
</code></p>

<hr />

<p>※ 以下挫折中 ※</p>

<h2 id="httpdインストール">httpdインストール</h2>

<p><code>bash
sudo yum -y update
sudo yum -y install httpd
</code></p>

<h2 id="Django+インストール">Django インストール</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/CortYuming/20120503/p1">Django1.4 + mod_wsgi 環境構築とりあえずのメモ</a></li>
<li><a href="http://hima-j.in/django/django-setup/">Django のインストールからプロジェクトの作成まで</a>
<code>bash
sudo yum install mod_wsgi
sudo pip install django
sudo mkdir /var/www/html/django
cd /var/www/html/django
sudo django-admin.py startproject mysite
</code></li>
</ul>


<h3 id="開発用サーバの起動と確認">開発用サーバの起動と確認</h3>

<p>SGの設定で8080ポートを開けておく</p>

<p>``` bash
cd mysite
python manage.py runserver 8080 &amp;
w3m http://127.0.0.1:8080</p>

<p>※ 「It worked!」が出れば成功
```</p>

<p>〜つづく〜</p>

<h2 id="その他">その他</h2>

<p>Zaimの家計簿自動入力スクリプトの作成もやりたかった。現在は認証のとろころで詰まってます。ググって自力でできるかなぁ。
できなかったら、次回はその辺やってみて有識者の知恵を拝借できればと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/29/python/"/>
    <updated>2013-04-29T06:45:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/29/python</id>
    <content type="html"><![CDATA[<h1 id="[Python入門](http://python.keicode.com/)+の勉強"><a href="http://python.keicode.com/">Python入門</a> の勉強</h1>

<h2 id="開発環境の準備">開発環境の準備</h2>

<p>PyDevをインストールして使う</p>

<h3 id="Eclipseのインストール">Eclipseのインストール</h3>

<ul>
<li><p><a href="http://www.eclipse.org/downloads/">公式ページ</a> からEclipseをDL<br/>
Eclipse IDE for Java EE Developers<br/>
→ 解凍してeclipseを実行したら起動した</p></li>
<li><p><a href="http://python.keicode.com/devenv/install-pydev.php">PyDevのインストール</a></p></li>
<li><p><a href="http://www.mwsoft.jp/programming/python/hello_world.html">ハロワを表示</a></p></li>
<li><p><a href="http://python.keicode.com/devenv/pydev-debug.php">PyDev を用いてデバッグ - ブレークポイントの設定とステップ実行</a></p></li>
</ul>


<hr />

<h2 id="Pythonのタイプとオブジェクト">Pythonのタイプとオブジェクト</h2>

<p>特徴とぱっと分からないものだけ書いていく</p>

<ul>
<li>オブジェクト -> Pythonのすべてのデータはオブジェクト</li>
<li>タイプ -> オブジェクトの一種</li>
</ul>


<h3 id="数値">数値</h3>

<p>整数型、浮動小数点型、複素数型などが使える</p>

<ul>
<li><p>余り
``` python</p>

<blockquote><blockquote><blockquote><p>10%3
1
```</p></blockquote></blockquote></blockquote></li>
<li><p>複素数
``` python</p>

<blockquote><blockquote><blockquote><p>(1+2j) + (2+3j)
(3+5j)
```</p></blockquote></blockquote></blockquote></li>
<li><p>乱数
``` python</p>

<blockquote><blockquote><blockquote><p>import random</p></blockquote></blockquote></blockquote></li>
</ul>


<blockquote><blockquote><blockquote><p>random.random()
0.89164962407887893     * 0 - 1 の間の浮動小数がランダムに出力される</p>

<p>L=[1,2,3,4,5]       * 1 - 5 の間の整数がランダムに出力される
random.choice(L)
1
random.choice(L)
1
random.choice(L)
4
random.choice(L)
5
```</p></blockquote></blockquote></blockquote>

<ul>
<li>mathモジュール<br/>
数学的な演算ができる
``` python

<blockquote><blockquote><blockquote><p>import math
math.pi             * 円周率の計算
3.1415926535897931
```</p></blockquote></blockquote></blockquote></li>
</ul>


<h3 id="文字列">文字列</h3>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>a = 'ABCdE'
a
'ABCdE'</p>

<p>a[0]    * 先頭の文字
'A'
a[4]
'E'
a[-1]   * 最後尾の文字
'E'
a[-5]
'A'
a[1:2]  * 2文字目のみ表示
'B'
a[1:3]  * 2-3文字目を表示
'BC'
len(a)  * 文字数表示
5
a.find('C')  * 文字列中にCが出てくるのが何文字目かを出す(出力結果+1文字目に出現する)
2
a.upper()  * すべて大文字にする
'ABCDE'
```</p></blockquote></blockquote></blockquote>

<ul>
<li>アトリビュートの取得と関数のhelp表示</li>
</ul>


<p>``` python</p>

<blockquote><blockquote><blockquote><p>dir(a)
['<strong>add</strong>', '<strong>class</strong>', '<strong>contains</strong>', '<strong>delattr</strong>', '<strong>doc</strong>', '<strong>eq</strong>', '<strong>format</strong>', '<strong>ge</strong>', '<strong>getattribute</strong>', '<strong>getitem</strong>', '<strong>getnewargs</strong>', '<strong>getslice</strong>', '<strong>gt</strong>', '<strong>hash</strong>', '<strong>init</strong>', '<strong>le</strong>', '<strong>len</strong>', '<strong>lt</strong>', '<strong>mod</strong>', '<strong>mul</strong>', '<strong>ne</strong>', '<strong>new</strong>', '<strong>reduce</strong>', '<strong>reduce_ex</strong>', '<strong>repr</strong>', '<strong>rmod</strong>', '<strong>rmul</strong>', '<strong>setattr</strong>', '<strong>sizeof</strong>', '<strong>str</strong>', '<strong>subclasshook</strong>', '<em>formatter_field_name_split', '</em>formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']</p>

<p>help(a.join)
Help on built-in function join:</p></blockquote></blockquote></blockquote>

<p>join(...)</p>

<pre><code>S.join(iterable) -&gt; string

Return a string which is the concatenation of the strings in the
iterable.  The separator between elements is S.
</code></pre>

<p>```</p>

<ul>
<li>フォーマット
``` python

<blockquote><blockquote><blockquote><p>'{0} FG'.format(a)
'ABCdE FG'</p></blockquote></blockquote></blockquote></li>
</ul>


<blockquote><blockquote><blockquote><p>x = 10/3     * 計算結果は整数になる
x
3
x = 10.0/3   * 計算結果は浮動小数になる
x
3.3333333333333335</p>

<p>'{0:.3f}'.format(x)
'3.333'
'{0:.1f}'.format(x)
'3.3'
```</p></blockquote></blockquote></blockquote>

<h3 id="リスト">リスト</h3>

<p>かっこで要素をかこむ。</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>L = [2,4,6,8,10]
L[1:3]
[4, 6]</p>

<p>M = L + [1,3,5]
M
[2, 4, 6, 8, 10, 1, 3, 5]</p>

<p>M.sort()
M
[1, 2, 3, 4, 5, 6, 8, 10]</p>

<p>M.append(100)
M
[1, 2, 3, 4, 5, 6, 8, 10, 100]</p>

<p>M.pop()
100
M
[1, 2, 3, 4, 5, 6, 8, 10]</p>

<p>len(M)
8</p>

<p>[1,1,1,2,2,3].count(1)
3
[1,1,1,2,2,3].count(2)
2</p>

<p>L = [ 1, 'Hello', 3.14 ]
L[1]
'Hello'
L[1][1]
'e'</p>

<p>N = [[1,2,3], 'Hello', {'name':'Keisuke Oyama','age':37}]
N[1]
'Hello'</p>

<p>N[2]
{'age': 37, 'name': 'Keisuke Oyama'}
N[2]['age']
37
```</p></blockquote></blockquote></blockquote>

<ul>
<li>内包表記(Comprehensions)
簡単にあるリストから条件に適合するリストを作成できる。</li>
</ul>


<p>``` python</p>

<blockquote><blockquote><blockquote><p>L = [1,2,3,4,5]
[x for x in L if x > 2]
[3, 4, 5]
[3*x for x in L if x > 2]
[9, 12, 15]</p>

<p>L = ['hello','world']
[x.upper() for x in L]
['HELLO', 'WORLD']
```</p></blockquote></blockquote></blockquote>

<h2 id="タプル(Tuple)">タプル(Tuple)</h2>

<ul>
<li>複数のオブジェクトをひとつにまとめたもの</li>
<li>()でくくったものがタプルだが、必須ではない。でもかっこでくくったほうがわかりやすくて親切</li>
</ul>


<p>``` python</p>

<blockquote><blockquote><blockquote><p>A = ('Keisuke', 37)
A
('Keisuke', 37)</p>

<p>a, b = A
a
'Keisuke'
b
37</p>

<p>A = ('Keisuke', )   * オブジェクト1個のタプルも作成可能
A
('Keisuke',)</p>

<p>A[0] = 'Shinya'     * 要素への代入ができないこところがリストと違う
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
```</p></blockquote></blockquote></blockquote>

<h2 id="ディクショナリ+(dictionary)">ディクショナリ (dictionary)</h2>

<ul>
<li>マッピングタイプのひとつ</li>
<li>キーと値のペアを保持するオブジェクト</li>
</ul>


<p>``` python</p>

<blockquote><blockquote><blockquote><p>D = {'name':'Keisuke Oyama', 'age':37}
D['name']
'Keisuke Oyama'</p>

<p>E['car'] = 'Sianna'
E['make'] = 'Toyota'
E
{'car': 'Sianna', 'make': 'Toyota'}</p>

<p>dir(D)
['<strong>class</strong>', '<strong>cmp</strong>', '<strong>contains</strong>', '<strong>delattr</strong>', '<strong>delitem</strong>', '<strong>doc</strong>', '<strong>eq</strong>', '<strong>format</strong>', '<strong>ge</strong>', '<strong>getattribute</strong>', '<strong>getitem</strong>', '<strong>gt</strong>', '<strong>hash</strong>', '<strong>init</strong>', '<strong>iter</strong>', '<strong>le</strong>', '<strong>len</strong>', '<strong>lt</strong>', '<strong>ne</strong>', '<strong>new</strong>', '<strong>reduce</strong>', '<strong>reduce_ex</strong>', '<strong>repr</strong>', '<strong>setattr</strong>', '<strong>setitem</strong>', '<strong>sizeof</strong>', '<strong>str</strong>', '<strong>subclasshook</strong>', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']</p>

<p>D.keys()
['age', 'name']
D.values()
[37, 'Keisuke Oyama']</p>

<p>D.has_key('name')
True
D.has_key('address')
False</p>

<p>'name' in D    * 上と同じ
True
'address' in D
False</p>

<p>```</p></blockquote></blockquote></blockquote>

<h2 id="セット(set)">セット(set)</h2>

<p>順序付けされていないユニークな要素で構成された、コレクション</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>L = ['a', 'a', 'b', 'c', 'c', 'a']
S = set(L)
S
set(['a', 'c', 'b'])   * 重複がなくなっている</p>

<p>M = set('Hello')
M
set(['H', 'e', 'l', 'o'])  * 文字列からセットを作成</p>

<p>A = set('Hello')
B = set('World')
A
set(['H', 'e', 'l', 'o'])
B
set(['d', 'r', 'o', 'W', 'l'])</p>

<p>A - B
set(['H', 'e'])</p>

<p>A | B
set(['e', 'd', 'H', 'l', 'o', 'r', 'W'])</p>

<p>A &amp; B
set(['l', 'o'])</p>

<p>A ^ B
set(['e', 'd', 'H', 'r', 'W'])  * AとBそれぞれに存在しているものを表示
→ lとoはAとB両方に含まれているので表示しない。それ以外は表示
```</p></blockquote></blockquote></blockquote>

<h1 id="JSONファイルの利用">JSONファイルの利用</h1>

<ul>
<li><a href="http://tmlife.net/programming/python/python-json-module.html">Python : json モジュールで json 読み込み</a></li>
<li><a href="http://jsonlint.com/">The JSON Validator</a></li>
</ul>


<h2 id="リンク">リンク</h2>

<ul>
<li><a href="http://tmlife.net/programming/python/python-json-module.html">Python : json モジュールで json 読み込み</a></li>
</ul>


<h1 id="デコレータ">デコレータ</h1>

<h2 id="roles">roles</h2>

<p>権限を設定できる。実行時にホスト名やユーザ名などの引数指定を無くすことが目的。</p>

<h3 id="1環境1サーバ">1環境1サーバ</h3>

<p>``` python</p>

<h1 id="!/usr/bin/python">!/usr/bin/python</h1>

<h1 id="coding:+utf-8">coding: utf-8</h1>

<p>from fabric.api import run, env
from fabric.decorators import roles</p>

<p>env.roledefs['dev'] = ['devserver1']</p>

<p>@roles('dev')
def host_name():</p>

<pre><code>    run('uname -n')
</code></pre>

<p><code>
実行結果
</code>
$ fab -f fabfile_roles.py -u ftakao2007 host_name
[devserver1] Executing task 'host_name'
[devserver1] run: uname -n
[devserver1] Login password for 'ftakao2007':
[devserver1] out: devserver1
[devserver1] out:</p>

<p>Done.
Disconnecting from devserver1... done.
```</p>

<h3 id="1環境複数サーバ">1環境複数サーバ</h3>

<p>``` python</p>

<h1 id="!/usr/bin/python">!/usr/bin/python</h1>

<h1 id="coding:+utf-8">coding: utf-8</h1>

<p>from fabric.api import run, env
from fabric.decorators import roles</p>

<p>env.roledefs['dev'] = ['devserver1', 'devserver2']</p>

<p>@roles('dev')
def host_name():</p>

<pre><code>    run('uname -n')
</code></pre>

<p><code>
実行結果
</code>
$ fab -f fabfile_roles.py -u ftakao2007 host_name
[devserver1] Executing task 'host_name'
[devserver1] run: uname -n
[devserver1] Login password for 'ftakao2007':
[devserver1] out: devserver1
[devserver1] out:</p>

<p>[devserver2] Executing task 'host_name'
[devserver2] run: uname -n
[devserver2] out: devserver2
[devserver2] out:</p>

<p>Done.
Disconnecting from devserver2... done.
Disconnecting from devserver1... done.
```</p>

<h3 id="複数環境複数サーバ">複数環境複数サーバ</h3>

<p>``` python</p>

<h1 id="!/usr/bin/python">!/usr/bin/python</h1>

<h1 id="coding:+utf-8">coding: utf-8</h1>

<p>from fabric.api import run, env
from fabric.decorators import roles</p>

<p>env.roledefs = {</p>

<pre><code>'dev': ['devserver1', 'devserver2'],
'stg': ['stgserver1', 'stgserver2']
</code></pre>

<p>}</p>

<p>@roles('dev')
def host_name():</p>

<pre><code>   run('uname -n')
</code></pre>

<p>@roles('stg')
def host_name2():</p>

<pre><code>   run('uname -n')
</code></pre>

<p><code>
実行結果
</code>
$ fab -f fabfile_roles.py -u ftakao2007 host_name
[devserver1] Executing task 'host_name'
[devserver1] run: uname -n
[devserver1] Login password for 'ftakao2007':
[devserver1] out: devserver1
[devserver1] out:</p>

<p>[devserver2] Executing task 'host_name'
[devserver2] run: uname -n
[devserver2] out: devserver2
[devserver2] out:</p>

<p>Done.
Disconnecting from devserver2... done.
Disconnecting from devserver1... done.</p>

<p>$ fab -f fabfile_roles.py -u ftakao2007 host_name2
[stgserver1] Executing task 'host_name2'
[stgserver1] run: uname -n
[stgserver1] Login password for 'ftakao2007':
[stgserver1] out: stgserver1
[stgserver1] out:</p>

<p>[stgserver2] Executing task 'host_name2'
[stgserver2] run: uname -n
[stgserver2] out: stgserver2
[stgserver2] out:</p>

<p>Done.
Disconnecting from stgserver1... done.
Disconnecting from stgserver2... done.
```</p>

<h2 id="ユーザも設定">ユーザも設定</h2>

<p>``` python</p>

<h1 id="!/usr/bin/python">!/usr/bin/python</h1>

<h1 id="coding:+utf-8">coding: utf-8</h1>

<p>from fabric.api import run, env
from fabric.decorators import roles</p>

<p>env.roledefs['dev'] = ['devserver1']
env.user = 'ftakao2007'</p>

<p>@roles('dev')
def host_name():</p>

<pre><code>    run('uname -n')
</code></pre>

<p><code>
実行結果
</code>
$ fab -f fabfile_roles.py host_name
[devserver1] Executing task 'host_name'
[devserver1] run: uname -n
[devserver1] Login password for 'ftakao2007':
[devserver1] out: devserver1
[devserver1] out:</p>

<p>Done.
Disconnecting from devserver1... done.
```</p>

<h3 id="リンク">リンク</h3>

<ul>
<li><a href="http://docs.fabfile.org/en/1.4.0/usage/execution.html">Execution model</a></li>
<li><a href="http://www.ianlewis.org/jp/fabric-pythonic">Fabric デプロイツールのPythonicな書き方</a> 環境辞書</li>
<li><a href="http://iiwake.me/2013/03/26/199">Python Fabricでデプロイしてみた</a> 外部cfgファイル読み込み</li>
</ul>


<hr />

<h2 id="task">task</h2>

<p>fabricが実行できるタスクを色々制御できる</p>

<h3 id="基本">基本</h3>

<p>``` python</p>

<h1 id="!/usr/bin/python">!/usr/bin/python</h1>

<h1 id="coding:+utf-8">coding: utf-8</h1>

<p>from fabric.api import run
from fabric.decorators import task</p>

<p>@task
def host_type():</p>

<pre><code>    run('uname -s')
</code></pre>

<p>```</p>

<h3 id="エイリアス設定">エイリアス設定</h3>

<p>``` python</p>

<h1 id="!/usr/bin/python">!/usr/bin/python</h1>

<h1 id="coding:+utf-8">coding: utf-8</h1>

<p>from fabric.api import run
from fabric.decorators import task</p>

<p>@task
def host_type():</p>

<pre><code>    run('uname -s')
</code></pre>

<p>@task(alias='remote_host_name')
def host_name():</p>

<pre><code>    run('uname -n')
</code></pre>

<p><code>
実行結果
</code>
$ fab -f fabfile_task.py --list
Available commands:</p>

<pre><code>host_name
host_type
remote_host_name
</code></pre>

<p>※ エイリアスで登録したコマンドが実行可能になっている</p>

<p>$ fab -f fabfile_task.py -H devserver1 -u ftakao2007 host_type
[devserver1] Executing task 'host_type'
[devserver1] run: uname -s
[devserver1] Login password for 'ftakao2007':
[devserver1] out: SunOS
[devserver1] out:</p>

<p>Done.
Disconnecting from devserver1... done.</p>

<p>$ fab -f fabfile_task.py -H devserver1 -u ftakao2007 host_name
[devserver1] Executing task 'host_name'
[devserver1] run: uname -n
[devserver1] Login password for 'ftakao2007':
[devserver1] out: devserver1
[devserver1] out:</p>

<p>Done.
Disconnecting from devserver1... done.</p>

<p>$ fab -f fabfile_task.py -H devserver1 -u ftakao2007 remote_host_name
[devserver1] Executing task 'remote_host_name'
[devserver1] run: uname -n
[devserver1] Login password for 'ftakao2007':
[devserver1] out: devserver1
[devserver1] out:</p>

<p>Done.
Disconnecting from devserver1... done.
※ host_nameと同じ実行結果
```</p>

<h3 id="リンク">リンク</h3>

<ul>
<li><a href="http://docs.fabfile.org/en/1.2.2/usage/tasks.html#new-style-tasks">Defining tasks</a></li>
</ul>


<hr />

<h1 id="モジュール分割">モジュール分割</h1>

<p>rolesとtaskを組み合わせてモジュール分割</p>

<p>``` python
[fabfile.py]</p>

<h1 id="!/usr/bin/python">!/usr/bin/python</h1>

<h1 id="coding:+utf-8">coding: utf-8</h1>

<p>import dev_mod</p>

<p>[dev_mod.py]
from fabric.api import run, env
from fabric.decorators import task, roles</p>

<p>env.roledefs['dev'] = ['devserver1']
env.user = 'ftakao2007'</p>

<p>@task
@roles('dev')
def host_name():</p>

<pre><code>    run('uname -n')
</code></pre>

<p><code>
ファイル名を「fabfile.py」にするとコマンド実行時にファイルを引数として与えなくてもよくなる。  
実行結果
</code>
$ fab --list
Available commands:</p>

<pre><code>dev_mod.host_name
</code></pre>

<p>$ fab dev_mod.host_name
[devserver1] Executing task 'dev_mod.host_name'
[devserver1] run: uname -n
[devserver1] Login password for 'ftakao2007':
[devserver1] out: devserver1
[devserver1] out:</p>

<p>Done.
Disconnecting from devserver1... done.
```</p>

<p>メインのファイルがものすごくシンプルになりました。<br/>
いずれはモジュールからパッケージにしたほうがいいのかな。</p>

<h2 id="リンク">リンク</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/feiz/20110915/1316107432">fabfileの構造化</a></li>
</ul>


<h1 id="定数の実装">定数の実装</h1>

<p>参考リンクのとおり
``` python
[const.py]
class _const:</p>

<pre><code>class ConstError(TypeError): pass
def __setattr__(self,name,value):
    if self.__dict__.has_key(name):
        raise self.ConstError, "Can't rebind const(%s)"%name
    self.__dict__[name]=value
</code></pre>

<p>import sys
sys.modules[<strong>name</strong>]=_const()</p>

<p>[fabfile.py]</p>

<h1 id="!/usr/bin/python">!/usr/bin/python</h1>

<h1 id="coding:+utf-8">coding: utf-8</h1>

<p>from fabric.api import run
import const</p>

<p>const.DEV_SSH_PATH = "/usr/bin"
const.DEV_SUDO_PATH = "/usr/local/bin"</p>

<p>def check_df():
  run("{SUDO_PATH}/sudo {SSH_PATH}/ssh nasserver1 df -h vol_takao".format(SSH_PATH=const.DEV_SSH_PATH,SUDO_PATH=const.DEV_SUDO_PATH))</p>

<p><code>
実行結果
</code>
$ fab -H devserver1 -u ftakao2007 check_df
[devserver1] Executing task 'check_df'
[devserver1] run: /usr/local/bin/sudo /bin/ssh nasserver1 df -h vol_takao
[devserver1] Login password for 'ftakao2007':
[devserver1] out: Filesystem               total       used      avail capacity  Mounted on
[devserver1] out: /vol/vol_takao/         2764MB      117MB     2647MB       4%  /vol/vol_takao/
[devserver1] out: /vol/vol_takao/.snapshot      307MB      224KB      306MB       0%  /vol/vol_takao/.snapshot
[devserver1] out:</p>

<p>Done.
Disconnecting from devserver1... done.
```
ディクショナリを使えばformatの中身がきっとすっきりする。</p>

<h2 id="リンク">リンク</h2>

<p><a href="https://sites.google.com/site/michinobumaeda/programming/pythonconst">Python で定数のようなものを使う</a></p>

<hr />

<h2 id="リンクメモ">リンクメモ</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/oneshotlife_tom/20121026/1351255211">Pythonで楽天ウェブサービスを使う。サンプルコード。</a></li>
<li><a href="https://sites.google.com/site/kuraitlab/programing-language/python/python-oop1">Pythonでオブジェクト指向①</a></li>
<li><a href="http://kuenishi.hatenadiary.jp/entry/2013/04/23/162205">メモリリークとは何か</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fabric]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/06/fabric/"/>
    <updated>2013-04-06T21:53:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/06/fabric</id>
    <content type="html"><![CDATA[<h1 id="Fabricインストール">Fabricインストール</h1>

<h2 id="CentOS6.4の場合">CentOS6.4の場合</h2>

<p><code>
su -
bash
yum update
yum -y install python python-devel gcc
curl http://python-distribute.org/distribute_setup.py | python
curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python
pip install fabric fexpect
</code></p>

<p>pycryptoのバージョンによっては、実行時に以下のエラーが出る
<code>
AttributeError: 'module' object has no attribute 'HAVE_DECL_MPZ_POWM_SEC'
</code></p>

<p>pycryptoのバージョンを変更すればよい
<code>
pip uninstall pycrypto
pip install PyCrypto==2.3
</code></p>

<h3 id="テスト">テスト</h3>

<p>``` python fabric_test.py
from fabric.api import *</p>

<p>def host_type() :</p>

<pre><code>run('uname -s')
</code></pre>

<p>```</p>

<p>``` bash
[ftakao2007 script]$ fab -f fabric_test.py -H localhost host_type
[localhost] Executing task 'host_type'
[localhost] run: uname -s
[localhost] Login password for 'ftakao2007':
[localhost] out: Linux
[localhost] out:</p>

<p>Done.
Disconnecting from localhost... done.
[ftakao2007 script]$
```</p>

<h1 id="EC2で利用する">EC2で利用する</h1>

<p>インスタンスを作成してsshでアクセスできるところまでは設定済みの想定</p>

<h2 id="実行方法">実行方法</h2>

<p>ec2上のユーザ:ec2-user<br/>
ec2のアドレス:10.160.26.123 (仮)<br/>
秘密鍵:hoge.pem</p>

<p>``` bash
[ftakao2007 script]$ fab -f fablic_test.py -i hoge.pem -H ec2-user@10.160.26.123 host_type</p>

<p>[10.160.26.123] Executing task 'host_type'
[10.160.26.123] run: uname -s
[10.160.26.123] out: Linux
[10.160.26.123] out:</p>

<p>Done.
Disconnecting from localhost... done.
```</p>

<h1 id="テクニック">テクニック</h1>

<h2 id="キーボードから入力した値をfabricで利用する">キーボードから入力した値をfabricで利用する</h2>

<p>fabricというよりpythonの使い方かな。。</p>

<p>``` python
name = raw_input('Enter name: ')</p>

<h1 id="name+=++aaa+">name = "aaa"</h1>

<h1 id="print+name">print name</h1>

<p>def var_test(var=name):</p>

<pre><code>    run("echo {in_var}".format(in_var=var))
</code></pre>

<p>```
※ 「raw_input」のところでnameに入力した値が入る<br/>
※ nameの中身がvar_test関数の中の変数varに代入される<br/>
※ varの中身がin_varに入り、runの中で変数が展開される</p>

<p>``` bash
[ftakao2007 script]$ fab -f fabric_test.py -H localhost var_test
Enter name: hogehoge
[localhost] Executing task 'var_test'
[localhost] run: echo hogehoge
[localhost] Login password for 'ftakao2007':
[localhost] out: hogehoge
[localhost] out:</p>

<p>Done.
Disconnecting from localhost... done.
```</p>

<p>2変数を使う場合
``` python
sei_name = raw_input('Enter family sei_name: ')
na_name = raw_input('Enter first na_name: ')</p>

<p>def var_test(var1=sei_name,var2=na_name):</p>

<pre><code>    run(""" 
    echo {in_var1} {in_var2}
    """.format(in_var1=var1,in_var2=var2))
</code></pre>

<p>```</p>

<p>``` bash
[ftakao2007 script]$ fab -f fabric_test.py -H localhost var_test
Enter family sei_name: yamada
Enter first na_name: taro
[localhost] Executing task 'var_test'
[localhost] run:</p>

<pre><code>echo yamada taro
</code></pre>

<p>[localhost] Login password for 'ftakao2007':
[localhost] out: yamada taro
[localhost] out:</p>

<p>Done.
Disconnecting from localhost... done.
```</p>

<h1 id="リンク">リンク</h1>

<ul>
<li><a href="http://www.slideshare.net/tafujish/hbstudy41-auto-scalingv13">FablicとMonitを使ってオートスケーリングを自作してみよう</a></li>
<li><a href="http://d.hatena.ne.jp/shiumachi/touch/20130414/1365920515">今日からすぐに使えるデプロイ・システム管理ツール Fabric 入門</a></li>
<li><a href="http://dekokun.github.io/posts/2013-04-07.html">Python製デプロイツール Fabricを初めて使う際に役立つTips</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
