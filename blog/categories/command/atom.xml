<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: command | Octopress Blog]]></title>
  <link href="http://ftakao2007.github.com/blog/categories/command/atom.xml" rel="self"/>
  <link href="http://ftakao2007.github.com/"/>
  <updated>2013-05-06T18:03:34+09:00</updated>
  <id>http://ftakao2007.github.com/</id>
  <author>
    <name><![CDATA[ftakao2007]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[逆引きコマンド]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/14/sed-gyakubiki/"/>
    <updated>2013-04-14T00:20:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/14/sed-gyakubiki</id>
    <content type="html"><![CDATA[<h2 id="■改行を">■改行を</h2>

<h3 id="入れたい">入れたい</h3>

<p>「=」で改行
``` bash
fukui-no-MacBook-Air:tmp ftakao2007$ cat vimrc
set fileencoding=utf-8
set fileencodings=iso-2022-jp,utf-8,euc-jp</p>

<p>fukui-no-MacBook-Air:tmp ftakao2007$ cat vimrc | gsed -e 's/=/=\n/g'
set fileencoding=
utf-8
set fileencodings=
iso-2022-jp,utf-8,euc-jp
```</p>

<h3 id="消したい">消したい</h3>

<p>``` bash
fukui-no-MacBook-Air:tmp ftakao2007$ cat vimrc
set fileencoding=utf-8
set fileencodings=iso-2022-jp,utf-8,euc-jp</p>

<p>fukui-no-MacBook-Air:tmp ftakao2007$ cat vimrc | tr -d '\n'
set fileencoding=utf-8set fileencodings=iso-2022-jp,utf-8,euc-jpfukui-no-MacBook-Air:tmp ftakao2007$
```</p>

<h2 id="■空行を">■空行を</h2>

<h3 id="消したい">消したい</h3>

<p>``` bash
fukui-no-MacBook-Air:tmp ftakao2007$ cat aaa.log
a</p>

<p>gsfe</p>

<p>wefa
awefa</p>

<p>w
fukui-no-MacBook-Air:tmp ftakao2007$ sed -e '/<sup>$/d'</sup> aaa.log
a
gsfe
wefa
awefa
w
fukui-no-MacBook-Air:tmp ftakao2007$ sed -ne '/./p' aaa.log
a
gsfe
wefa
awefa
w
fukui-no-MacBook-Air:tmp ftakao2007$
```</p>

<h2 id="■Webページを">■Webページを</h2>

<h3 id="保存したい">保存したい</h3>

<h4 id="htmlのみ">htmlのみ</h4>

<p><code>bash
curl http://www.example.com &gt; example.com.html
</code></p>

<h4 id="[ページを丸ごとローカルに保存](https://sites.google.com/site/hymd3a/google-site/wget)"><a href="https://sites.google.com/site/hymd3a/google-site/wget">ページを丸ごとローカルに保存</a></h4>

<p><code>bash
wget -r -np -k -l 0 example.com
</code></p>

<h4 id="データを送る">データを送る</h4>

<p>``` bash
fukui-no-MacBook-Air:DATA ftakao2007$ curl --data-urlencode a=太郎 http://www.example.com/TOMONOKAI_CMS/CGI/hoge.cgi
あなたのポストしたデータは、
a=%E5%A4%AA%E9%83%8E
です。</p>

<p>fukui-no-MacBook-Air:DATA ftakao2007$ curl --data a=太郎 http://www.example.com/TOMONOKAI_CMS/CGI/hoge.cgi
あなたのポストしたデータは、
a=太郎
です。</p>

<p>fukui-no-MacBook-Air:DATA ftakao2007$ wget --data a=太郎 http://www.example.com/TOMONOKAI_CMS/CGI/hoge.cgi</p>

<ul>
<li>URLはexample.comに変更してあります
```</li>
</ul>


<h2 id="■文字コードを">■文字コードを</h2>

<h3 id="変換する">変換する</h3>

<p>``` bash
fukui-no-MacBook-Air:DATA ftakao2007$ cat numref
&#25105;&#12293;&#12399;&#12471;&#12455;&#12523;&#33464;&#20154;&#12384;&#12290;
fukui-no-MacBook-Air:DATA ftakao2007$ cat numref | w3m -T text/html -dump
我々はシェル芸人だ。</p>

<p>fukui-no-MacBook-Air:DATA ftakao2007$ cat numref | nkf --numchar-input
我々はシェル芸人だ。
```</p>

<h2 id="■文字列を">■文字列を</h2>

<h3 id="抽出">抽出</h3>

<p>``` bash
bash-3.2$ cat a.log
1
2
3
4
5
6
7
8
9</p>

<p>bash-3.2$ cat a.log | grep 5
5
```</p>

<h3 id="マッチした前後を抽出">マッチした前後を抽出</h3>

<p><code>bash
bash-3.2$ cat a.log | grep 5 -A 2
5
6
7
bash-3.2$ cat a.log | grep 5 -B 2
3
4
5
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sed]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/13/sed/"/>
    <updated>2013-04-13T23:54:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/13/sed</id>
    <content type="html"><![CDATA[<h1 id="sed+(ストリーミングエディタ)">sed (ストリーミングエディタ)</h1>

<h2 id="Option">Option</h2>

<h3 id="n">n</h3>

<p>標準出力を制御
``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed.txt
aaa
bbb123
ccc</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed '/bbb/p' test_sed.txt
aaa
bbb123
bbb123
ccc</p>

<ul>
<li>bbbが含まれている行があればその行を出力するという処理。
 nオプション無しだと、「テキストの内容＋処理結果」となっている</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -n '/bbb/p' test_sed.txt
bbb123</p>

<ul>
<li>nオプションをつけると処理結果のみ出力</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -n '/bbb/d' test_sed.txt</p>

<ul>
<li>bbbが含まれる行を削除する処理。
 nオプションをつけている場合は処理結果は何も表示されず、よくわからない。</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed '/bbb/d' test_sed.txt
aaa
ccc</p>

<ul>
<li><p>nオプション無しで実行すると、bbbの行が削除されている事が分かる。
```</p></li>
<li><p>pで表示する場合はnをつけると目的の部分だけ出力できる</p></li>
<li>dで削除する場合はnを付けなければ削除された行以外を出力できる</li>
</ul>


<!--
* sで置換する場合はnを付けなければ目的の語句が置換された状態で全ファイル分出力される  
➡d,sはnを付けると出力結果は何も表示されない
-->


<h3 id="e">e</h3>

<p>次にくる値はコマンドとみなす
``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed.txt
aaa
bbb123
ccc</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed '/bbb/d' test_sed.txt
aaa
ccc</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -e '/bbb/d' -e '/ccc/d' test_sed.txt
aaa</p>

<ul>
<li>bbbが含まれる行を削除し、cccが含まれる行も削除する</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed '/bbb/d' -e '/ccc/d' test_sed.txt
sed: -e: No such file or directory
sed: /ccc/d: No such file or directory
aaa
ccc</p>

<ul>
<li>eオプションを使う場合はコマンドごとに明示的にeオプションを指定する必要がある
```</li>
</ul>


<h3 id="f">f</h3>

<p>次にくる値はスクリプトとみなす
``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed.txt
aaa
bbb123
ccc</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ cat sed_test.sed
/bbb/p</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -n -f sed_test.sed test_sed.txt
bbb123
```</p>

<h3 id="i">i</h3>

<p>標準出力に出力せず、直接ファイルを書き換える</p>

<p>``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed.txt
aaa
bbb123
ccc</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -i.bak '/bbb/d' test_sed.txt</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed.txt
aaa
ccc</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed.txt.bak
aaa
bbb123
ccc</p>

<ul>
<li>.bakにバックアップをとって元ファイルはbbbを含む行が削除されている</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -i '/bbb/d' test_sed.txt
sed: 1: "test_sed2.txt": undefined label 'est_sed.txt'</p>

<ul>
<li>拡張子を指定しない場合はエラーになる
```</li>
</ul>


<h2 id="Command">Command</h2>

<h3 id="p">p</h3>

<p>出力する</p>

<p>``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed.txt
aaa
bbb123
ccc</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -n '1,2p' test_sed.txt
aaa
bbb123</p>

<ul>
<li>1-2行目を出力</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -n '3p' test_sed.txt
ccc</p>

<ul>
<li>3行目を出力</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -n '/bbb/p' test_sed.txt
bbb123</p>

<ul>
<li>bbbが含まれる行を出力</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -n '$p' test_sed.txt
ccc</p>

<ul>
<li>最後の行を出力
```</li>
</ul>


<h3 id="d">d</h3>

<p>削除する
``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed.txt
aaa
bbb123
ccc</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed '1,2d' test_sed.txt
ccc</p>

<ul>
<li>1-2行目を削除</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed '3d' test_sed.txt
aaa
bbb123</p>

<ul>
<li>3行目を削除</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed '/bbb/d' test_sed.txt
aaa
ccc</p>

<ul>
<li>bbbが含まれる行を削除</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed '$d' test_sed.txt
aaa
bbb123</p>

<ul>
<li>最後の行を削除
```</li>
</ul>


<h3 id="q">q</h3>

<p>特定の文字列が含まれる行まで表示
``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed3.txt
aaa
bbbb123bbb456bbb
ccc
bbb789bbb</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed '/ccc/q' test_sed3.txt
aaa
bbbb123bbb456bbb
ccc</p>

<ul>
<li>cccが含まれる行まで表示
```</li>
</ul>


<h3 id="s">s</h3>

<p>置換する</p>

<p>``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed.txt
aaa
bbb123
ccc</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed 's/bbb/xxx/' test_sed.txt
aaa
xxx123
ccc</p>

<ul>
<li><p>bbbをxxxに置換
```</p></li>
<li><p>g
すべてのパターンに対して処理を実行する
``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed3.txt
aaa
bbb123bbb456bbb
ccc
bbb789bbb</p></li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed 's/bbb/xxx/' test_sed3.txt
aaa
xxx123bbb456bbb
ccc
xxx789bbb</p>

<ul>
<li>gオプションが無い場合は最初のみ置換される</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed 's/bbb/xxx/g' test_sed3.txt
aaa
xxx123xxx456xxx
ccc
xxx789xxx</p>

<ul>
<li><p>gオプションをつけると全てが置換される
```</p></li>
<li><p>n(整数)
n番目の発生を置換
``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed3.txt
aaa
bbbb123bbb456bbb
ccc
bbb789bbb</p></li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed 's/bbb/ddd/1' test_sed3.txt
aaa
dddb123bbb456bbb
ccc
ddd789bbb</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed 's/bbb/ddd/2' test_sed3.txt
aaa
bbbb123ddd456bbb
ccc
bbb789ddd</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed 's/bbb/ddd/3' test_sed3.txt
aaa
bbbb123bbb456ddd
ccc
bbb789bbb
```</p>

<ul>
<li>p
パターンスペースの先頭セグメントから最初の復帰改行までを標準出力に出力する
``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed3.txt
aaa
bbbb123bbb456bbb
ccc
bbb789bbb</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -n 's/bbb/ddd/p1' test_sed3.txt
dddb123bbb456bbb
ddd789bbb</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -n 's/bbb/ddd/p2' test_sed3.txt
bbbb123ddd456bbb
bbb789ddd</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -n 's/bbb/ddd/p3' test_sed3.txt
bbbb123bbb456ddd
```</p>

<ul>
<li>w
ファイルへ書き出す
``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed3.txt
aaa
bbbb123bbb456bbb
ccc
bbb789bbb</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -n '/bbb/w bbb.txt     &lt;-ここで一度改行されている
/bbb/!w aaa.txt' test_sed3.txt</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ cat bbb.txt
bbbb123bbb456bbb
bbb789bbb</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ cat aaa.txt
aaa
ccc</p>

<ul>
<li>bbbにマッチした行をbbb.txtへ、マッチしなかった行をaaa.txtへ書き出す</li>
</ul>


<p>========================</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed3.txt
aaa
bbbb123bbb456bbb
ccc
bbb789bbb</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed 's/bbb/ddd/gw ddd.txt' test_sed3.txt > change.txt</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ cat ddd.txt
dddb123ddd456ddd
ddd789ddd</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ cat change.txt
aaa
dddb123ddd456ddd
ccc
ddd789ddd
fukui-no-MacBook-Air:sed ftakao2007$</p>

<ul>
<li>変換された行のみddd.txtに保存、変換後の全行をchange.txtに出力
```</li>
</ul>


<h2 id="Match">Match</h2>

<h3 id="空行以外を出力">空行以外を出力</h3>

<p>``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed4.txt
aaa</p>

<p>bbbb123bbb456bbb
ccc</p>

<p> bbb789bbb</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -n '/./p' test_sed4.txt
aaa
bbbb123bbb456bbb
ccc
 bbb789bbb</p>

<ul>
<li>空行以外の行を出力
```</li>
</ul>


<h3 id="空行を出力">空行を出力</h3>

<p>``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed4.txt
aaa</p>

<p>bbbb123bbb456bbb
ccc</p>

<p> bbb789bbb</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -n '/<sup>$/p'</sup> test_sed4.txt</p>

<ul>
<li>空行を出力
(例は空行2行分が出力されている)
```</li>
</ul>


<h3 id="最初の空行から次の空行までを出力">最初の空行から次の空行までを出力</h3>

<p>``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed4.txt
aaa</p>

<p>bbbb123bbb456bbb
ccc</p>

<p> bbb789bbb</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -ne '/<sup>$/,/<sup>$/p'</sup></sup> test_sed4.txt</p>

<p>bbbb123bbb456bbb
ccc</p>

<ul>
<li>最初の空行から次の空行までが出力されている</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -ne '/<sup>$/,/<sup>$/p'</sup></sup> test_sed4.txt | sed -e '/<sup>$/d'</sup>
bbbb123bbb456bbb
ccc</p>

<ul>
<li>マッチした最初と最後の空行自体は削除して表示</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -ne '/<sup>$/,/<sup>$/p'</sup></sup> test_sed4.txt | sed -ne '/./p'
bbbb123bbb456bbb
ccc</p>

<ul>
<li>上と同じ結果
```</li>
</ul>


<h3 id="最初の空行から次の空行までの行を削除">最初の空行から次の空行までの行を削除</h3>

<p>``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed4.txt
aaa</p>

<p>bbbb123bbb456bbb
ccc</p>

<p> bbb789bbb</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed -e '/<sup>$/,/<sup>$/d'</sup></sup> test_sed4.txt
aaa
 bbb789bbb
fukui-no-MacBook-Air:sed ftakao2007$
```</p>

<h2 id="Advance">Advance</h2>

<h3 id="正規表現(?)">正規表現(?)</h3>

<h4 id="+">&amp;</h4>

<p>置換のときに省略して記載できる</p>

<p>``` bash
fukui-no-MacBook-Air:sed ftakao2007$ cat test_sed.txt
aaa
bbb123
ccc</p>

<p>fukui-no-MacBook-Air:sed ftakao2007$ sed 's/bbb/bbb_add_/' test_sed.txt
aaa
bbb_add_123
ccc</p>

<ul>
<li>bbbの直後に<em>add</em>を追加する</li>
</ul>


<p>fukui-no-MacBook-Air:sed ftakao2007$ sed 's/bbb/&amp;<em>add</em>/' test_sed.txt
aaa
bbb_add_123
ccc</p>

<ul>
<li>先ほどと同じ結果。「bbb」のかわりに「&amp;」で指定
```</li>
</ul>


<h3 id="区切り位置">区切り位置</h3>

<p>区切り位置を<code>/</code>の代わりに<code>;</code>にすると、<code>/</code>をエスケープしなくても良くなる
``` bash
fukui-no-MacBook-Air:DATA ftakao2007$ cat 3.html | gsed -e 's/&lt;\/td>/&amp;\n/g'</p>

<table>
    <tr>
<td>a</td>
<td>b</td>

<td>c</td>

    </tr>
</table>


<p>fukui-no-MacBook-Air:DATA ftakao2007$ cat 3.html | gsed -e 's;</td>;&amp;\n;g'</p>

<table>
    <tr>
<td>a</td>
<td>b</td>

<td>c</td>

    </tr>
</table>


<p>```</p>

<h2 id="参考">参考</h2>

<ul>
<li><a href="http://www.ksknet.net/linuxrz/sed.html">sed - ストリーミングエディタ</a></li>
<li><a href="http://www.ishilab.net/~ishihara/tips/sed.txt">sed に関するメモ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-command]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/10/git-command/"/>
    <updated>2013-04-10T20:13:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/10/git-command</id>
    <content type="html"><![CDATA[<h2 id="git+init">git init</h2>

<h1 id="リポジトリとのやりとり関連コマンド">リポジトリとのやりとり関連コマンド</h1>

<h2 id="fetch,+marge,+push">fetch, marge, push</h2>

<p><a href="http://dqn.sakusakutto.jp/2012/11/git_pull.html">Git pullを使うべきでない３つの理由</a>によると
リモートリポジトリとやり取りするときは以下のコマンドを使えれば問題ないみたい。</p>

<p>:--:|:--:
fetch|ダウンロード
marge|2つのブランチを統合
push|アップロード</p>

<p>pullを使うのはfetchした後margeするのがめんどくさく感じるようになった時。</p>

<h3 id="fetch,+marge">fetch, marge</h3>

<p><a href="http://qiita.com/items/e082d64f3f8b424e9b7d">fetch と pullの違い</a></p>

<h3 id="push">push</h3>

<h1 id="戻し、削除関連">戻し、削除関連</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitメモ]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/07/git/"/>
    <updated>2013-04-07T22:57:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/07/git</id>
    <content type="html"><![CDATA[<h1 id="メモ書き">メモ書き</h1>

<p>コンセプトは、曖昧に覚えていることをとりあえず書き出し、修正しながら身につける。</p>

<h2 id="リモートリポジトリ">リモートリポジトリ</h2>

<ul>
<li>gitサーバ側に作成されるリポジトリ。クライアント側から作成することはできない。</li>
<li>このリポジトリが無いとpushできない</li>
</ul>


<h2 id="master">master</h2>

<ul>
<li>masterのブランチ</li>
<li><code>git commit -m "hoge"</code> のように、commitを初めてした時に自動で作成される</li>
<li>ブランチは <code>git branch</code> で確認可能</li>
</ul>


<h2 id="origin">origin</h2>

<ul>
<li>URLのエイリアスみたいなもの</li>
<li><code>git remote add origin https://github.com/ftakao2007/test.git</code> で後ろのURLが登録される</li>
<li>リポジトリごとに異なる</li>
<li>以下herokuの例
<code>bash
fukui-no-MacBook-Air:h ftakao2007$ git remote -v
heroku  git@heroku.com:quiet-tor-2376.git (fetch)
heroku  git@heroku.com:quiet-tor-2376.git (push)
origin  git://github.com/heroku/ruby-sample.git (fetch)
origin  git://github.com/heroku/ruby-sample.git (push)
</code></li>
</ul>


<h1 id="とりあえず手っ取り早くgitを使いたい">とりあえず手っ取り早くgitを使いたい</h1>

<h2 id="初期設定">初期設定</h2>

<h3 id="まっさらなremoteリポジトリの場合">まっさらなremoteリポジトリの場合</h3>

<p><code>bash
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/ftakao2007/test.git
git push -u origin master
</code></p>

<h3 id="いろいろ使われているremoteリポジトリをローカルに持ってきて使う場合">いろいろ使われているremoteリポジトリをローカルに持ってきて使う場合</h3>

<p><code>bash
git clone https://github.com/ftakao2007/test.git
cd test
</code></p>

<h2 id="編集">編集</h2>

<h3 id="リモートにプッシュ">リモートにプッシュ</h3>

<p><code>bash
vi munin_construct.py
git add munin_construct.py
git status
git commit -m 'Commit test'
git pull --rebase origin
git push origin
</code></p>

<h2 id="ブランチ">ブランチ</h2>

<h3 id="作成、確認、切り替え、コミット、プッシュ">作成、確認、切り替え、コミット、プッシュ</h3>

<p>``` bash
fukui-no-MacBook-Air:test2 ftakao2007$ git branch
* master</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git branch test-branch</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git branch
* master
  test-branch</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git checkout test-branch
Switched to branch 'test-branch'</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git branch
  master
* test-branch</p>

<p>vi hoge.txt
git status
git add hoge.txt
git status
git commit -m "hoge"
git push -u origin test-branch
git checkout master
```</p>

<h2 id="削除">削除</h2>

<h3 id="ローカルのブランチの削除">ローカルのブランチの削除</h3>

<p>``` bash
fukui-no-MacBook-Air:test2 ftakao2007$ git branch
* master
  test-branch</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git branch -D test-branch
Deleted branch test-branch (was 19b1e03).</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git branch
* master
```</p>

<h3 id="リモートのブランチ削除">リモートのブランチ削除</h3>

<p>``` bash
fukui-no-MacBook-Air:test2 ftakao2007$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/test-branch</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git push origin :test-branch     ※コロンをつける
Username:
Password:
To https://github.com/ftakao2007/test2.git
 - [deleted]         test-branch</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
```</p>

<h3 id="コミットの取り消し">コミットの取り消し</h3>

<p>``` bash
fukui-no-MacBook-Air:test2 ftakao2007$ git log
commit f56ca7da10d119fd91fb5f7d1c4799d94f525a91
Author: ftakao2007 <a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#58;&#102;&#116;&#x61;&#107;&#97;&#x6f;&#x32;&#48;&#48;&#55;&#x40;&#103;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#x66;&#116;&#97;&#x6b;&#97;&#111;&#50;&#x30;&#48;&#x37;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a>
Date:   Wed Apr 10 22:41:52 2013 +0900</p>

<pre><code>a
</code></pre>

<p>commit 3c63dc839b68e5753da4ab69330e465b31dd17c2
Author: ftakao2007 <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#x66;&#x74;&#97;&#107;&#97;&#111;&#50;&#x30;&#x30;&#55;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;">&#x66;&#116;&#x61;&#107;&#97;&#111;&#x32;&#x30;&#48;&#55;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a>
Date:   Wed Apr 10 22:37:36 2013 +0900</p>

<pre><code>hoge
</code></pre>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git reset --soft HEAD^</p>

<p>fukui-no-MacBook-Air:test2 ftakao2007$ git log
commit 3c63dc839b68e5753da4ab69330e465b31dd17c2
Author: ftakao2007 <a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#102;&#116;&#x61;&#x6b;&#x61;&#x6f;&#x32;&#x30;&#x30;&#x37;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#109;">&#102;&#x74;&#x61;&#107;&#x61;&#111;&#50;&#x30;&#48;&#x37;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;</a>
Date:   Wed Apr 10 22:37:36 2013 +0900</p>

<pre><code>hoge
</code></pre>

<p><code>``
</code>git reset --hard HEAD<sup>`</sup> にすると、コミットの取り消しと同時にファイルの内容もコミット前に戻る。</p>

<h3 id="[originのurlを変更する](http://d.hatena.ne.jp/wats/20100915/1284478558)"><a href="http://d.hatena.ne.jp/wats/20100915/1284478558">originのurlを変更する</a></h3>

<p><code>git remote set-url origin &lt;新しいリポジトリURL&gt;</code></p>

<h2 id="今後確認すること">今後確認すること</h2>

<ul>
<li>リビジョンてどうなってるの？ぱっとググった感じリビジョンて概念を使わない？世代を超えたファイルのdiffってできないのかな。</li>
<li>Webでdiffしたら文字化けしてる？</li>
</ul>


<h2 id="README.md">README.md</h2>

<p><a href="http://kuroigamen.com/13">gituhub に自分のプロジェクトのリポジトリを作ってみる。</a></p>

<h2 id="リンク">リンク</h2>

<ul>
<li><a href="http://lealog.hateblo.jp/entry/2012/12/22/023547">最低限の知識でGitの運用をする</a></li>
<li><a href="http://havelog.ayumusato.com/develop/git/e513-git_branch_model.html">ぼくが実際に運用していたGitブランチモデルについて</a></li>
<li><a href="http://d.hatena.ne.jp/tt_clown/touch/20130412/git_management">git の運用指針</a></li>
<li><a href="http://d.hatena.ne.jp/viver/touch/20110402/p1">Webサイトをgithubで管理してpush時に自動的に同期する方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[command]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/07/command/"/>
    <updated>2013-04-07T20:16:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/07/command</id>
    <content type="html"><![CDATA[<h1 id="ssh-keygen">ssh-keygen</h1>

<ul>
<li><a href="http://d.hatena.ne.jp/tmd45/20110203/1296744114">ローカル（Windows, cygwin）からGithubのリポジトリにpushするメモ</a></li>
<li><a href="http://d.hatena.ne.jp/MIZUNO/20080705/1215238138">複数の公開鍵を使い分ける</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
