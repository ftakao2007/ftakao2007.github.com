<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 勉強会 | Octopress Blog]]></title>
  <link href="http://ftakao2007.github.com/blog/categories/mian-qiang-hui/atom.xml" rel="self"/>
  <link href="http://ftakao2007.github.com/"/>
  <updated>2013-05-04T16:33:13+09:00</updated>
  <id>http://ftakao2007.github.com/</id>
  <author>
    <name><![CDATA[ftakao2007]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[20130419 第14回「ネットワーク パケットを読む会（仮）」]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/20/study-network/"/>
    <updated>2013-04-20T05:37:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/20/study-network</id>
    <content type="html"><![CDATA[<p><a href="http://atnd.org/events/38649">第14回「ネットワーク パケットを読む会（仮）」</a>に参加しましたので覚書です。
ネットワークキャプチャ関連の覚書はここのページに順次追記していきます。</p>

<hr />

<h1 id="[フレッシャーズのためのパケット解析入門+(hebikuzure+さん)](http://www.slideshare.net/hebikuzure/20130419-19149363)"><a href="http://www.slideshare.net/hebikuzure/20130419-19149363">フレッシャーズのためのパケット解析入門 (hebikuzure さん)</a></h1>

<p>なんとなくフワッと使っていた単語をイメージで捉える。</p>

<h3 id="パケット通信方式">パケット通信方式</h3>

<p>連続データを一定量ずつ蓄積して1個の伝送単位にして、伝送路の開いているタイミングで送出、
受信したデータを元の連続データに復元する方式。</p>

<h3 id="パケット">パケット</h3>

<p>パケット通信方式における情報の伝送単位</p>

<h3 id="イメージ">イメージ</h3>

<table>
<thead>
<tr>
<th align="center">単語</th>
<th align="center">例え</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">連続データ</td>
<td align="center">水道から流れ出てている水</td>
</tr>
<tr>
<td align="center">伝送単位(パケット)</td>
<td align="center">水を入れたペットボトル</td>
</tr>
</tbody>
</table>


<p>パケット通信は水道水をペットボトルに入れて運ぶみたいなイメージ</p>

<hr />

<h2 id="パケット解析とは">パケット解析とは</h2>

<ol>
<li>パケットキャプチャをする</li>
<li>キャプチャしたパケットを上位のプロトコルごとにその内容を解析する</li>
</ol>


<hr />

<h2 id="パケットキャプチャ">パケットキャプチャ</h2>

<p>パケット一つ一つに含まれるデータを記録する</p>

<h3 id="パケットに含まれているデータ">パケットに含まれているデータ</h3>

<ul>
<li>送信元</li>
<li>送信先</li>
<li>サイズ(パケット長)</li>
<li>データの種類(上位プロトコル)</li>
</ul>


<h3 id="キャプチャされる場所(〜モデル)">キャプチャされる場所(〜モデル)</h3>

<p><a href="http://en.wikipedia.org/wiki/OSI_model">OSI参照モデル</a></p>

<ul>
<li>ネットワーク層</li>
<li>データリンク層</li>
</ul>


<p><a href="http://en.wikipedia.org/wiki/Internet_protocol_suite">TCPモデル(IETF)</a></p>

<ul>
<li>リンク層</li>
</ul>


<h3 id="パケットをキャプチャする場所(実際の場所)">パケットをキャプチャする場所(実際の場所)</h3>

<ul>
<li><p>対象デバイス内? or デバイス外?</p>

<ul>
<li><p>実際の現場ではデバイス外でキャプチャすることが多い<br/>
→Android、iOS、テレビ、ゲーム機などはそもそもデバイス内でキャプチャを取ることができないことがほとんど</p></li>
<li><p>学習、研究、トラブルシューティングはデバイス内で行える</p></li>
</ul>
</li>
<li><p>対象デバイス内</p>

<ol>
<li>オペレーティング・システムに付属するツールを利用する

<ul>
<li>tcpdump (Linux / Unix環境)</li>
</ul>
</li>
<li>オペレーティング・システムベンダー提供のツール

<ul>
<li>WinPcap / Network Monitor (Windows環境)</li>
</ul>
</li>
<li>サードパーティのツールを利用する

<ul>
<li>Wireshark / OmniPeek / NetworkMiner / tshark</li>
</ul>
</li>
</ol>
</li>
<li><p>対象デバイス外</p>

<ol>
<li><a href="http://e-words.jp/w/E3839DE383BCE38388E3839FE383A9E383BCE383AAE383B3E382B0.html">ミラーポート</a>

<ul>
<li>あるポートが送受信するデータを、同時に別のポートから送出する機能</li>
<li><a href="http://e-words.jp/w/E382B9E382A4E38383E38381E383B3E382B0E3838FE38396.html">スイッチングハブ</a>やルータはMACアドレスを覚えて特定のPCのみとデータ通信をするようになっているのでミラーポートを利用してパケットキャプチャする</li>
<li><a href="http://e-words.jp/w/E383AAE38394E383BCE382BFE3838FE38396.html">リピーターハブ</a>は接続しているPC全部にデータが送られているのでミラーポートを利用しなくてもデータを拾うことができる。</li>
</ul>
</li>
<li>タップ

<ul>
<li><a href="http://www.bitrieve.co.jp/products/lan_tap/">タップ</a>を挟んでデータの通信を分岐させる</li>
</ul>
</li>
<li>プロキシやゲートウェイ

<ul>
<li>プロキシやゲートウェイ配下のサーバの通信が取得できる</li>
</ul>
</li>
<li>通信対向側(サーバ側)でのキャプチャ

<ul>
<li>サーバ側で取得できているデータは、本当に目的のクライアントからの通信なのか確認する必要がある<br/>
→<a href="http://e-words.jp/w/SSLE382A2E382AFE382BBE383A9E383ACE383BCE382BF.html">SSLアクセラレータ</a>、プロキシ、ロードバランサなどの通信である可能性がある</li>
</ul>
</li>
</ol>
</li>
</ul>


<p>＊ どこでキャプチャするのが適切なのか検討し、複数の場所でキャプチャするなど工夫が必要</p>

<h3 id="パケットをキャプチャする方法">パケットをキャプチャする方法</h3>

<ul>
<li><p>ハードウェア<br/>
最近はソフトウェアでキャプチャすることがほとんど。キャプチャ用のハード機器はものすごく高価らしい。</p></li>
<li><p>ソフトウェア</p>

<ol>
<li><p>GUI</p>

<ul>
<li>Wireshark / NetworkMiner / OmniPeek / Network Monitor

<ul>
<li>設定がわかりやすい</li>
<li>結果がすぐに確認できる</li>
<li>その場で解析が可能</li>
</ul>
</li>
</ul>
</li>
<li><p>CUI</p>

<ul>
<li>tcpdump / WinPcap / tshark

<ul>
<li>動作が軽快</li>
<li>バッチ処理向き</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>


<h3 id="ソフトウェアによるパケットキャプチャまとめ">ソフトウェアによるパケットキャプチャまとめ</h3>

<table>
<thead>
<tr>
<th align="center">ソフト</th>
<th align="center">OS</th>
<th align="center">CUI/GUI</th>
<th align="center">特徴</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="http://ja.wikipedia.org/wiki/Tcpdump">tcpdump</a></td>
<td align="center">Unix</td>
<td align="center">CUI</td>
<td align="center">Unix系のCUIでよく利用される。libpcapに含まれている。</td>
</tr>
<tr>
<td align="center"><a href="http://ja.wikipedia.org/wiki/Netcat">netcat</a></td>
<td align="center">Unix</td>
<td align="center">CUI</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center"><a href="http://ja.wikipedia.org/wiki/Pcap">WinPcap</a></td>
<td align="center">Windows</td>
<td align="center">CUI</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center"><a href="http://www.wireshark.org/docs/man-pages/tshark.html">tshark</a></td>
<td align="center">Unix/Windows</td>
<td align="center">CUI</td>
<td align="center">WiresharkのCUI版</td>
</tr>
<tr>
<td align="center"><a href="http://ja.wikipedia.org/wiki/Wireshark">Wireshark</a></td>
<td align="center">Unix/Windows</td>
<td align="center">GUI</td>
<td align="center">FreeのGUIツールでは一番有名</td>
</tr>
<tr>
<td align="center"><a href="http://support.microsoft.com/kb/933741/ja">Network Monitor</a></td>
<td align="center">Windows</td>
<td align="center">GUI</td>
<td align="center">プロセス単位で通信状態を確認できる</td>
</tr>
<tr>
<td align="center"><a href="http://www.dit.co.jp/products/omni_peek/omnipeek.html">OmniPeek</a></td>
<td align="center">Unix/Windows</td>
<td align="center">GUI</td>
<td align="center">商用ツール</td>
</tr>
<tr>
<td align="center"><a href="http://www.netresec.com/?page=NetworkMiner">NetworkMiner</a></td>
<td align="center">Unix/Windows</td>
<td align="center">GUI</td>
<td align="center">画像やcookieなど、アプリケーションレベルの確認がしやすい</td>
</tr>
</tbody>
</table>


<h3 id="データ形式">データ形式</h3>

<table>
<thead>
<tr>
<th align="center">形式</th>
<th align="center">拡張子</th>
<th align="center">特徴</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">libpcap形式</td>
<td align="center">pcap</td>
<td align="center">一番汎用的な形式</td>
</tr>
<tr>
<td align="center">Wireshark新形式</td>
<td align="center">pcapng</td>
<td align="center">pcapより詳細な情報が取れる。ngはNextGenerationの略</td>
</tr>
<tr>
<td align="center">Network Monitor形式</td>
<td align="center">cap</td>
<td align="center">Windowsで使う場合</td>
</tr>
</tbody>
</table>


<p>※ とりあえずpcap形式にしておけば大概のソフトで読める</p>

<h3 id="どんなデータが記録されるか">どんなデータが記録されるか</h3>

<ul>
<li>パケット全体のバイナリデータ</li>
<li>記録した時刻</li>
<li>キャプチャしたインターフェイス</li>
<li>トラフィックを発生させたプロセス</li>
</ul>


<hr />

<h2 id="パケット解析">パケット解析</h2>

<h3 id="基本的にはツールを利用する">基本的にはツールを利用する</h3>

<p>Wireshark / NetworkMiner / OmniPeek / Network Monitor</p>

<h3 id="力技で独自解析">力技で独自解析</h3>

<p>pcap形式などのフォーマットは公開されているので独自にバイナリ解析をする</p>

<hr />

<h1 id="tcpdumpから始まるネットワークエンジニアの朝+(twovs+さん)">tcpdumpから始まるネットワークエンジニアの朝 (twovs さん)</h1>

<h2 id="tcpdumpとWireshark">tcpdumpとWireshark</h2>

<ul>
<li><p>tcpdump<br/>
軽い、低機能、とりあえず見る、サーバ側でキャプチャ、感じ取る、気づく</p></li>
<li><p>Wireshark<br/>
重い、高機能、じっくり見る、ローカルのPCで結果を見る、探しだす、確認する</p></li>
</ul>


<h2 id="パケット解析で大切なこと">パケット解析で大切なこと</h2>

<h3 id="正常系を知っておくこと">正常系を知っておくこと</h3>

<p>異常な状態を察知するには正常な状態を知っておくことが大切</p>

<h2 id="何もしてないのに壊れましたー">何もしてないのに壊れましたー</h2>

<h3 id="IPv4だと問題なかったのにIPv6だとつながらない">IPv4だと問題なかったのにIPv6だとつながらない</h3>

<p>IPv6アドレスにpingを打ってみたが反応がなかった<br/>
→IPv4はARPでMACアドレスを取得しているが<strong>IPv6はICMPでMACアドレスを取得している</strong><br/>
→IPv6ではICMPをフィルタしちゃダメ!!</p>

<h3 id="IPv6の通信で送り元と送り先でサイズが違う">IPv6の通信で送り元と送り先でサイズが違う</h3>

<p>送り先でパケットを見たら「padding」というのがひっついていた<br/>
→小さいデータを送るときは「0」を付加して64byteにしてから投げるようになっている設定があるらしい</p>

<h3 id="MTU=1500にもかかわらずものすごい大きなデータを送ろうとしていた">MTU=1500にもかかわらずものすごい大きなデータを送ろうとしていた</h3>

<p>送信元でものすごいでかいデータを送信先に投げている。でも送信先のキャプチャは正常<br/>
→ VMwareのGuestOSでキャプチャするとき、Virtual Switchに行く前のデータをキャプチャしていた<br/>
→ Virtual Switchを通過すると通常のサイズになるらしい。</p>

<h2 id="まとめ">まとめ</h2>

<h3 id="LANケーブルは刺さってる？">LANケーブルは刺さってる？</h3>

<p>意外と多いらしい。お客様には「ケーブル刺さってるか確認してください」と言うと「馬鹿にしてるのか！」とお叱りを受けるので
「LANケーブルの抜き差しで直ることがありますので試してください」と言うと、双方ハッピー。</p>

<h3 id="FireWallの設定とか大丈夫？">FireWallの設定とか大丈夫？</h3>

<h3 id="IPv6つかってるのにICMPをフィルタしてない？">IPv6つかってるのにICMPをフィルタしてない？</h3>

<h3 id="どこのキャプチャを撮ってる？">どこのキャプチャを撮ってる？</h3>

<p>内部？外部？内部でもどこ？VMwareだとVirtual Switchの前？後？</p>

<h1 id="とある環境(3G回線)であるアプリのパケットを見てみた(totoromasaki+さん)">とある環境(3G回線)であるアプリのパケットを見てみた(totoromasaki さん)</h1>

<p>私は何も聞いてないです。。</p>

<h1 id="リンク">リンク</h1>

<ul>
<li><a href="http://gvtkne.blogspot.jp/2013/04/14.html">ネットワークパケットを読む会(仮) 14回に参加してきた(otahi さん)</a></li>
<li><a href="http://www.slideshare.net/tohakushi/tcpdumptcpreplay">tcpdumpとtcpreplayとtcprewriteと他。</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シェフハンズオンセミナー]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/16/chef-handson/"/>
    <updated>2013-04-16T18:52:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/16/chef-handson</id>
    <content type="html"><![CDATA[<h1 id="AWSのUbuntuでChefを動かす">AWSのUbuntuでChefを動かす</h1>

<p>デフォルトのAWSで用意されているUbuntuにChefをインストールする。<br/>
ハンズオンのインスタンスは必要なパッケージがすでにいくらかインストールされていたみたいなので
トライアンドエラーで設定。</p>

<h1 id="事前準備">事前準備</h1>

<p>Opscodeでアカウントを作成して鍵ファイルとknife.rbを事前にDLしておく。<br/>
AWSのインスタンスを利用できる状態にしておく。<br/>
AWSのaccess keyとsecret access keyを用意しておく。</p>

<h1 id="AWSにChefクライアントをインストール">AWSにChefクライアントをインストール</h1>

<p>Ubuntu 12.04.2 LTSの64bitを選択</p>

<h1 id="必要パッケージとChef+クライアントのインストール">必要パッケージとChef クライアントのインストール</h1>

<p>``` bash
sudo apt-get update
sudo apt-get upgrade
curl -L http://www.opscode.com/chef/install.sh | sudo bash</p>

<h1 id="sudo+apt-get+install+ruby+git+tree+g++">sudo apt-get install ruby git tree g++</h1>

<p>sudo apt-get install (パッケージたくさん)
```
※ パッケージはハンズオンで入っていたパッケージを根こそぎ入れた。必要なパッケージは現在精査中。</p>

<p>Chefのgemは以下に入っていることを意識すること<br/>
-> デフォルトのgemを使うと残念なことになるらしい。
<code>bash
ls -ld /opt/chef/embedded/bin/gem
</code></p>

<p><code>bash
cd ~
git clone https://github.com/opscode/chef-repo.git
cd chef-repo
tree
.
├── chef-repo
│   ├── certificates
│   │   └── README.md
│   ├── chefignore
│   ├── config
│   │   └── rake.rb
│   ├── cookbooks
│   │   └── README.md
│   ├── data_bags
│   │   └── README.md
│   ├── environments
│   │   └── README.md
│   ├── LICENSE
│   ├── Rakefile
│   ├── README.md
│   └── roles
│       └── README.md
└── credentials.tgz
</code></p>

<p>WorkstationとしてChef serverと通信するための環境ファイル用のディレクトリ作成
<code>bash
mkdir .chef
</code></p>

<p>この後、.chefにOpscodeからダウンロードした鍵とknife.rbをscpする。その後chef-repoディレクトリに移動して</p>

<p><code>bash
knife client list
XXXX-validator
</code>
※ pemファイルをリネームしているとここでエラーが出てしまう。DLしたファイル名をそのまま使う。</p>

<h1 id="knife-ec2インストール">knife-ec2インストール</h1>

<p>先ほどのgemのPATHを意識すること！！
<code>bash
sudo /opt/chef/embedded/bin/gem install knife-ec2 --no-ri --no-rdoc
</code></p>

<p>knife.rbにAWSアクセスするためのキーを記載する
``` bash</p>

<h1 id="knife+for+AWS">knife for AWS</h1>

<p>knife[:aws_access_key_id]     = "XXXXXXXXXXXXXXX"
knife[:aws_secret_access_key] = "XXXXXXXXXXXXXXXXXXXXXXXXXX"
knife[:region] = "ap-northeast-1"
```</p>

<h1 id="cookbookをWorkstationへclone">cookbookをWorkstationへclone</h1>

<p>``` bash
cd ~/chef-repo/cookbooks
git clone https://github.com/cl-lab-k/apache2-take.git
cd apache2-take
tree
.
├── attributes
│   └── default.rb     <em>重要
├── CHANGELOG.md
├── example
│   └── apache2-take-ubuntu.sh
├── files
│   └── default
│       └── tests
│           └── minitest
│               ├── default_test.rb
│               └── support
│                   └── helpers.rb
├── Gemfile
├── metadata.rb
├── README.md
├── recipes
│   └── default.rb     </em>重要
├── templates
│   └── default        *重要
│       ├── default.erb
│       ├── ports.conf.erb
│       └── twitter-search.html.erb
└── test</p>

<pre><code>└── kitchen
    └── Kitchenfile
</code></pre>

<p>```</p>

<h2 id="手軽なcookbook">手軽なcookbook</h2>

<ul>
<li><a href="http://acrmp.github.io/foodcritic/">Food Critic</a></li>
<li><a href="http://docs.opscode.com/knife_cookbook.html">knife cookbook test</a></li>
</ul>


<h1 id="Apache2+install">Apache2 install</h1>

<p>※ 以下はスクリプトで実行した場合の例。Chefは使っていない。</p>

<h2 id="script">script</h2>

<p><code>bash
cd ~/chef-repo/cookbooks/apache2-take/example/
sudo sh ./apache2-take-ubuntu.sh
</code>
スクリプトの内容は以下</p>

<ul>
<li>Apache2のインストール&amp;起動</li>
<li>Apache2のリクエスト待ち受けポートの変更</li>
<li>Apache2で”default”サイトを有効化</li>
<li>githubからサイト用コンテンツをclone</li>
<li>githubからサイト用コンテンツをダウンロード</li>
</ul>


<h1 id="同様のものをChefで処理">同様のものをChefで処理</h1>

<p>テスト
<code>bash
cd ~/chef-repo
knife cookbook test apache2-take
</code>
FoodCriticを使ったテスト
<code>bash
sudo /opt/chef/embedded/bin/gem install foodcritic --no-ri --no-rdoc
/opt/chef/embedded/bin/foodcritic cookbooks/apache2-take
</code></p>

<p>このままだと以下の様なエラーが出る
<code>bash
FC008: Generated cookbook metadata needs updating: cookbooks/apache2-take/metadata.rb:2
FC008: Generated cookbook metadata needs updating: cookbooks/apache2-take/metadata.rb:3
</code>
<a href="http://acrmp.github.io/foodcritic/">ここ</a>でコードの内容を確認し、スタイルを修正する。</p>

<p><code>bash
[DEPRECATION] "eval" is deprecated. Please use "evaluate" instead
</code>
<a href="http://www.blogosfera.co.uk/2013/04/eval-is-deprecated-please-use-evaluate-instead/">これはバージョンのWarningっぽい。</a>動くので今はスルー。</p>

<h2 id="cookbookのアップロード">cookbookのアップロード</h2>

<p><code>bash
cd ~/chef-repo/cookbooks/apache2-take
knife cookbook upload apache2-take
</code></p>

<p>EC2インスタンス起動
<code>bash
knife ec2 server create -S [key pair] -i [key file (XXX.pem)] -r "recipe[apache2-take]" -I ami-77cf4976 --flavor t1.micro -Z ap-northeast-1a -G [Security Group] -x ubuntu -N aws-handson -VV
</code>
これで新しいインスタンスが作成され、apacheが立ち上がる。</p>

<h1 id="メモ書">メモ書</h1>

<ul>
<li><p>コンバージョン(収束)させる<br/>
-> あるべき状態になる、将来ありたい状態と現状を埋める仕組み</p></li>
<li><p>98%の情報は下記のURLに存在する!<br/>
http://docs.opscode.com/chef/resources.html</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シェル芸 20130413]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/13/shellgei/"/>
    <updated>2013-04-13T11:30:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/13/shellgei</id>
    <content type="html"><![CDATA[<p><a href="http://kokucheese.com/event/index/78710/">第4回春爛漫シェル芸人撩乱勉強会&amp;第22回勝手に新歓定例会</a></p>

<h1 id="事前準備">事前準備</h1>

<h2 id="wget+curl+w3mの確認">wget curl w3mの確認</h2>

<p>全部入っていた</p>

<p><code>bash
[mickey@ftakao2007 ~]$ which wget
/usr/bin/wget
[mickey@ftakao2007 ~]$ which curl
/usr/bin/curl
[mickey@ftakao2007 ~]$ which w3m
/usr/bin/w3m
</code></p>

<h2 id="[open+usp+Tukubai+のインストール(CentOS+6.4)](https://github.com/usp-engineers-community/Open-usp-Tukubai)"><a href="https://github.com/usp-engineers-community/Open-usp-Tukubai">open usp Tukubai のインストール(CentOS 6.4)</a></h2>

<p>gitでインストールしてみる</p>

<p><code>bash
git clone https://github.com/usp-engineers-community/Open-usp-Tukubai.git
cd Open-usp-Tukubai
su -
make install
</code>
※ なぜかgitでは入らなかったのでhttpsで</p>

<p><code>bash
cd ~/work
wget http://www.usptomo.com/TOMONOKAI_CMS/HTML/DATA.zip
unzip DATA.zip
</code></p>

<h2 id="勉強会のまとめについて">勉強会のまとめについて</h2>

<p>正確な情報や丁寧な解説はきっと他の方にまとめていただけると思うので、自分は勉強会で学んだことを端的に
逆引きでまとめていくというコンセプトにしようと思います。</p>

<ul>
<li><a href="http://ftakao2007.github.io/blog/2013/04/14/sed-gyakubiki/">逆引きコマンド</a></li>
</ul>


<p>「正確な情報の汎用的な一般解よりも、とりあえずやりたいことができる」<br/>
「一箇所に情報を集約する」</p>

<p>を目的とします。勉強会でその時スゲーって思ってまとめても、あのコマンドどこだったっけとなることが多かったので
今後勉強会で学んだことは逆引き的に上記のページに集約しようと思います。</p>

<h2 id="リンク">リンク</h2>

<ul>
<li><a href="http://www.slideshare.net/ryuichiueda/20130406-18763665">第4回春爛漫シェル芸人撩乱勉強会(上田隆一さん)</a></li>
<li><a href="http://www.slideshare.net/HirofumiSaito/usp-lt-20130413">wgetとcurlで並列ダウンロード (hi_saito さん)</a></li>
<li><a href="http://laugh-labo.blogspot.jp/2013/04/4.html?spref=tw">「第4回春爛漫シェル芸人撩乱勉強会&amp;第22回勝手に新歓定例会」に参加してきたよー！ (laugh_K さん)</a></li>
<li><a href="http://kunst1080.hatenablog.com/entry/2013/04/15/004801">「第4回春爛漫シェル芸人撩乱勉強会&amp;第22回勝手に新歓定例会」あそびきにました (kunst1080 さん)</a></li>
<li><a href="http://rsooo.blogspot.jp/2013/04/">家に帰ってブログ書くまでがシェル芸(rsoooさん</a></li>
<li><p><a href="http://www.ustream.tv/recorded/31380919?utm_campaign=ustre-am&amp;amp;amp;amp;amp;utm_source=31380919&amp;amp;amp;amp;amp;utm_medium=social">USTREAM</a></p></li>
<li><p><a href="https://twitter.com/usptomo/status/323068045532737536/photo/1">本日一番の訳わからない写真</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
