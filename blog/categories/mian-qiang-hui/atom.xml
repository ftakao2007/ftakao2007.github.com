<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 勉強会 | Octopress Blog]]></title>
  <link href="http://ftakao2007.github.com/blog/categories/mian-qiang-hui/atom.xml" rel="self"/>
  <link href="http://ftakao2007.github.com/"/>
  <updated>2013-08-17T16:40:19+09:00</updated>
  <id>http://ftakao2007.github.com/</id>
  <author>
    <name><![CDATA[ftakao2007]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第31回R勉強会＠東京]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/06/01/study-r/"/>
    <updated>2013-06-01T15:06:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/06/01/study-r</id>
    <content type="html"><![CDATA[<h2 id="[第31回R勉強会＠東京](http://atnd.org/events/38992)"><a href="http://atnd.org/events/38992">第31回R勉強会＠東京</a></h2>

<h2 id="お勧め資料">お勧め資料</h2>

<p>はじめてのR masaha03 (SlideShare) 超お勧め</p>

<h2 id="データの読み込み">データの読み込み</h2>

<ul>
<li><p>組み込み関数
read.table read.csv</p></li>
<li><p>外部パッケージを使う
Eccel
画像ファイル</p></li>
<li><p>データ構造
データフレームがメイン</p></li>
</ul>


<h2 id="分析の前処理">分析の前処理</h2>

<p>データの結合 merge, rbind, cbind
データの抽出 subset</p>

<h2 id="分析">分析</h2>

<ul>
<li>各種手法の適用
ここで外部パッケージを使うことが多い
便利パッケージの紹介は本編</li>
</ul>


<h2 id="ファイル出力">ファイル出力</h2>

<ul>
<li><p>テキスト、Excel</p></li>
<li><p>図
組み込みのplot
外部パッケージ
lattice
ggplot2 (最近はこちらが多い)</p></li>
<li><p>レポーティング
knitr 普通のレポート
slidify パワーポイントに出力
Rpubs</p></li>
</ul>


<p>(昔はTeXとかでまとめることが多かった)</p>

<h2 id="エディタ">エディタ</h2>

<p>RGUI Windowsは使いにくい
RStudio 最近の定番。メモリは食う。一番無難
ESS Emacs
EZR 医学系ではやりつつある
Rzパッケージ SPSSの使いやすさ(GUI)をRで実現、masaha03さんが作った</p>

<h2 id="情報収集">情報収集</h2>

<h3 id="検索">検索</h3>

<ul>
<li><p>seekR
Rについて検索しやすい</p></li>
<li><p>Rseek
英語版</p></li>
</ul>


<h2 id="Web資料">Web資料</h2>

<p>R-tips
Rjpwiki
同志社大学　金明哲先生
群馬大学　青木繁伸先生</p>

<h2 id="書籍">書籍</h2>

<ul>
<li><p>ほかプログラミング言語の経験あり
R言語逆引きハンドブック
Rによるデータサイエンス
Rパッケージガイドブック</p></li>
<li><p>データ分析自体の不慣れ
データ解析のための統計モデリング入門
デー玉イニング入門 早稲田大学　豊田先生　シナリオに沿ってRを使っていく</p></li>
</ul>


<h2 id="勉強会">勉強会</h2>

<p>ゼロからはじめるR言語勉強会 最近はじまった勉強会
Wako.R (6/8開催) dritoshiさん R界のアイドルらしい。とがっている。人によっては引く
Tokyowebmining 充実した議論、主催者の自己紹介が長い
Zansa ガチで意も技術も高い大学生
集合地プログラミング勉強会 tetsuroitoさん 元はPythonをやっていた。今はやってない</p>

<p>さくさくテキストマイニング 資料が豊富。今はやってない
社会科学研究のためのR勉強会 ネットワーク関連</p>

<h2 id="さあやってみよう">さあやってみよう</h2>

<p>cran task view   目的別に外部パッケージがまとめられている。やりたいことが無い人はとっかかりに良いかも</p>

<p>Julia   Rに我慢なら無い人が作り始めた次世代統計言語
脅威のPython勢
pandas:RのデータフレームをPythonで
Bokeh:ggplot2ライクな可視化
scikit-learn:機械学習  機械学習向け
Orange:統計、機械学習  統計向け</p>

<p>Jubatsu ゆばたす。分散したデータを常に素早く深く分析する。元はC++のライブラリ。機械学習</p>

<hr />

<h1 id="Rによるやさしい統計学(分散分析)+aad34210さん">Rによるやさしい統計学(分散分析) aad34210さん</h1>

<h2 id="分散分析">分散分析</h2>

<p>分散分析　
3つ以上の平均値を比較するための統計的方法
2つの平均値を比較する方法はt検定</p>

<h2 id="二元配置分散分析(二要因とも対応なし)">二元配置分散分析(二要因とも対応なし)</h2>

<p>主効果：それぞれの要因ごとの効果   常温か、冷温か
交互作用効果:ふたつの要因が組み合わされた場合に生じる効果。単純に二つの足し算ではない</p>

<h2 id="二元配置分散分析(二要因とも対応あり)">二元配置分散分析(二要因とも対応あり)</h2>

<p>評価者によって主観が入っているのではないか？を分析</p>

<p>主効果:温度によって簿平均は異なるか？</p>

<pre><code>   銘柄によって異なるか？
</code></pre>

<h2 id="二元配置分散分析(一要因のみ対応あり)">二元配置分散分析(一要因のみ対応あり)</h2>

<p>冷蔵と常温をそれぞれ別の人たちに評価してもらったとき</p>

<hr />

<h2 id="seekRの中の人">seekRの中の人</h2>

<p>seekR管理人平村さん</p>

<p>LinkedInのR Projectがおすすめ
httpo://linkedin/</p>

<h2 id="RForcecomパッケージ">RForcecomパッケージ</h2>

<p>Salesforce.com,Force.comに接続するパッケージ
CRMにはいているデータを検索、引き出してRで分析してSalesforceに戻す</p>

<hr />

<h2 id="はじめよう多変量解析～主成分分析編～+sanoche16さん">はじめよう多変量解析～主成分分析編～ sanoche16さん</h2>

<h3 id="多変量解析とは">多変量解析とは</h3>

<p>多数の変量をもつデータを分析する</p>

<p>1変量、2変量の分析ができなければできない</p>

<p>平均、分散、共分散、相関係数、行列演算
微分積分、分布</p>

<h3 id="主成分分析">主成分分析</h3>

<p>分散を最大化させるのが一番合理的</p>

<p>因子分析は何が因子になっているかということを重視する
アルゴリズムは主成分分析</p>

<p>主成分分析か、因子分析か？
-> 因子分析でうまくいくかわからないようなものを分析するときは、とりあえずprcompに入れて主成分分析
-> 特徴を考えて要因分けしたい場合は因子分析</p>

<p>質の分析に主成分分析
-> 分散行列でやったとき、生の行列でやったとき、相関係数でやったとき
   -> 係数の順序は変わらないが、寄与率が変わる。寄与率が99%とかなってしまった。</p>

<p>相関の高い係数があると、使えるのか
相関係数の信頼区間が重要。
重回帰分析、目的変数がいかに精度を持っているかが重要</p>

<p>主成分分析は、どんな要素があるか、よりわかりやすく見るために使う。</p>

<hr />

<h1 id="R言語で学ぶマーケティング分析+-+競争ポジショニング戦略+-+yokkunsさん">R言語で学ぶマーケティング分析 - 競争ポジショニング戦略 - yokkunsさん</h1>

<h2 id="競争ポジショニング戦略">競争ポジショニング戦略</h2>

<p>市場はさまざまな価値感や趣向の人たちで構成されている。ターゲットになる人を決めたい。</p>

<p>レコメンドエンジンはもともとあるサービスに対するもの。
戦略ポジショニングは</p>

<p>どんな人たちで構成されていて　セグメンテーション
その中で誰をターゲットにして　ターゲティング
どんなサービスを提供するか　ポジショニング</p>

<h2 id="セグメンテーション">セグメンテーション</h2>

<p>市場を意味のあるグループに分ける</p>

<p>セグメント1,2,3,4</p>

<p>区分する方法：昔からの方法では、年代、性別、地域、職業など。
-> 趣味趣向が多様化しているので基本的な属性による区分では意味のあるグループができなくなってきている
-> 同じセグメント内でも、さまざまな趣向や価値観の人が存在するようになった。</p>

<h3 id="クラスタリングによるセグメンテーション">クラスタリングによるセグメンテーション</h3>

<p>ログやアンケートで、その人の趣向や消費行動を見て本質的なグループわけをすること
職業や性別ではなく、本質的なところでグループ分けする</p>

<p>主成分分析を駆使して可視化する。
k-means方</p>

<p>fmsbパッケージのradarchart関数で実行できる</p>

<h2 id="ターゲッティング">ターゲッティング</h2>

<p>どのセグメントをターゲットにするかを決定する</p>

<p>こだわりデジタル層
飛びつきミーハーそう</p>

<h2 id="ポジショニング">ポジショニング</h2>

<p>ターゲットセグメントの頭の中の自分たちのサービスと競合サービスの位置づけを理解し、彼らにどんなサービスを提供するかを決める</p>

<p>視覚マップを作成する
ユーザにとってのサービスの位置づけマップ。マップ上で近い位置にあるサービスは競争関係になる</p>

<p>視覚マップ上でユーザが重視している方角を見つける</p>

<p>視覚マップはMDSでつくる (発表者がMDSが好きだから)
個体間の距離や非類似関係からマップを構築する</p>

<p>MASSパッケージのisoMDS関数で作成できる</p>

<p>説明変数？</p>

<hr />

<h1 id="R+による自然言語処理入門+a_bickyさん">R による自然言語処理入門 a_bickyさん</h1>

<h2 id="基礎知識">基礎知識</h2>

<p>形態素解析　ざっくりというと単語分割のこと
「お酒」は「お」が接頭詞になる。ただ人によっては「お酒」で一語</p>

<p>「mecab」でできる
mecab
ハードルは高ければ高いほどくぐりやすい    &lt;- 入力する</p>

<p>ベクトル空間モデル
文書をベクトル空間の1点として表現する
素性(そせい feature) のとり方は色々ある</p>

<p>Unigram model</p>

<p>maxsentパッケージ  New York Timesの記事のタイトルのデータ
N-gram model</p>

<p>文字列処理はPythonでやったほうがやりやすい</p>

<hr />

<h1 id="ABテスト">ABテスト</h1>

<p>AパターンとBパターンを実際に試して結果が良いほうを選ぶ
本当に数値が高いほうを客観的に選べる</p>

<p>検定
起きた結果が偶然なのかを判断する</p>

<p>-> ABテストだけは簡単だが、検定を加えるととたんに難しくなる</p>

<p>A あったらいいなを形にする
B 無限の可能性をあなたに</p>

<p>好きなほうのキャッチコピーを選んでください
-> AとBを実際に選んでもらって決める</p>

<p>検定
A1 B2</p>

<p>この結果は偶然。どちらか一方が優れているとは言い切れない。
この時点でははっきりしない</p>

<p>「偶然おきる」
A.3打席1安打の3割りバッター
B.300打席100安打の3割バッター</p>

<p>Aは偶然かも、Bはすごい
binom.test</p>

<p>で検定ができる</p>

<hr />

<p>ZeroMQ(rzmq)つかうとRやほかの言語間で通信できる</p>

<hr />

<h1 id="RとPythonによるデータ解析入門">RとPythonによるデータ解析入門</h1>

<p>Python から R を呼び出す
Webクローラを書く、データベースを操作、文字列処理が楽になる</p>

<p>scikit-learnが物足りない</p>

<p>Pandas
Rで言うデータフレームが使える</p>

<p>Webデータ取得 -> csvに整形 -> 前処理 -> R</p>

<p>rpy2
で簡単にPythonとRの連携が非常に楽</p>

<p>pip install rpy2</p>

<p>これらよりjsonでzeroMQ使う方が連携しやすい?</p>

<p>ironpythonを使うほうが良い？</p>

<h2 id="リンク">リンク</h2>

<ul>
<li><a href="http://www.slideshare.net/hiratake55/seekrjp-22281554">中の人が語る seekR.jpの裏側</a></li>
<li><a href="http://blog.gepuro.net/archives/36">RとPythonによるデータ解析入門</a></li>
<li><a href="http://www.slideshare.net/teramonagi/tokyo-r31-20130601">可視化周辺の進化がヤヴァイ</a></li>
<li><a href="http://www.slideshare.net/sanoche16/tokyor31-22291701">はじめよう多変量解析〜主成分分析〜</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[東京渋谷 “初心者向けiPhoneアプリ開発” 勉強会② (5/22)]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/05/22/iphone-app-study/"/>
    <updated>2013-05-22T19:47:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/05/22/iphone-app-study</id>
    <content type="html"><![CDATA[<h2 id="[東京渋谷+“初心者向けiPhoneアプリ開発”+勉強会②+(5/22)](http://atnd.org/events/39513)"><a href="http://atnd.org/events/39513">東京渋谷 “初心者向けiPhoneアプリ開発” 勉強会② (5/22)</a></h2>

<p>Xcodeを基本から勉強。前は何も知らずに画面遷移をコピペプログラムしただけだったので基本から勉強します。
バージョンは4.6.2。</p>

<h3 id="プロジェクト作成">プロジェクト作成</h3>

<p>File -> New -> Project<br/>
Master-Detail-Application<br/>
Product Name : nicomoro
Use Storyboards」「Use Automatic Reference Counting」の二箇所チェック
createでデスクトップにフォルダを作成</p>

<h3 id="左側のパネル">左側のパネル</h3>

<ul>
<li><p>ファイルの一覧になっている<br/>
パネルに表示されるフォルダの構造と実際のフォルダでは構造が違う<br/>
→Xcode上では違う階層で同じ名前のファイル名も作れるが、コンパイル時にエラーになる。</p></li>
<li><p>フォルダのルールをできるだけ守る<br/>
プログラムを入れるフォルダ、設定ファイルを入れるフォルダ等予め決められているフォルダのルールにできるだけ従う<br/>
→変なところに作られたファイルは適切な場所に移動させる</p></li>
</ul>


<h3 id="左上の方">左上の方</h3>

<p>Runでシミュレーターを実行。横にあるメニューでシミュレーターを選択(iPhone,iPadなど)</p>

<h3 id="右上の方(Editor)">右上の方(Editor)</h3>

<p>左:通常表示<br/>
中:画面分割(ジェントルマンみたいなアイコン)使いっぱなしにしているとおかしくなるので作業が終わったら通常表示に戻すことを意識する<br/>
右:差分表示。あまり使わないほうが良い。ストーリーボードを開いている状態で押してしまうと差分が出まくって戻れなくなる</p>

<h3 id="右上の方(View)">右上の方(View)</h3>

<p>左:左側のパネルを出したり引っ込めたり<br/>
中:下のパネルを出したり引っ込めたり(実行ログが表示されたりするところ)<br/>
右:右側のパネルを出したり引っ込めたり(Identityとか情報が表示されたりするところ)<br/>
※ ここは色々いじってもOK</p>

<h3 id="アプリの設定をする画面">アプリの設定をする画面</h3>

<p>左側パネルの一番上の部分をクリックした後、「TARGETS」で目的のアプリを選択<br/>
アプリのアイコンの設定とかできる。</p>

<h3 id="Xcode特徴">Xcode特徴</h3>

<ul>
<li>設定したら反映されるが、削除の場合は反映されないことがある</li>
<li>削除したものを元に戻せるとは限らない(削除対象と関連するものも削除、変更されることがる)</li>
<li>設定でエディタの色も変えられるが変になることがあるのでできるだけ変えないほうが良い</li>
</ul>


<h3 id="ストーリーボード">ストーリーボード</h3>

<ul>
<li>ビジュアル的に開発できる</li>
<li>Xcodeの新しめの機能(参考書などにはまだ載ってないものも多いかも)</li>
<li>左側のパネルの「MainStoryboard.storyboard」をクリックすると表示される</li>
</ul>


<h3 id="使わないファイルなどを削除">使わないファイルなどを削除</h3>

<ul>
<li><p>ストーリーボードに表示されているものは選択してDeleteキーで消せる<br/>
→その後「Command S」で保存する</p></li>
<li><p>使わないmファイルやhファイルを削除<br/>
→「Move to Trash」でゴミ箱に移動しないと、表示されなくなるだけでディレクトリ内にはファイルは残ってしまう。エラーの元になるのでちゃんと消す。</p></li>
</ul>


<h3 id="ViewControlerの追加">ViewControlerの追加</h3>

<p>右下の方にあるところのリストにある「View Controler」を真ん中の画面にドラッグアンドドロップ<br/>
→AWSっぽい立方体のアイコンにチェックが入っている状態で表示される(Object library)</p>

<h3 id="リソースを追加">リソースを追加</h3>

<p>左側のパネルにフォルダやファイルをドラッグアンドドロップ<br/>
「Choose options for adding these files」の画面の「Add to targets」で対象のプロジェクトにチェックが入っていることを確認する。</p>

<h3 id="ステータスバーを消す">ステータスバーを消す</h3>

<p>iPhoneで電波とか時刻とかバッテリー残量とかが表示されているところ</p>

<ul>
<li>アプリの設定をする画面「Status bar」のVisibility「Hide during application launch」にチェックを入れる</li>
<li>ストリートボードで対象のView Controlerを選択し、右側のパネルの「Simulated Metrics」のStatus Barを「None」にする</li>
</ul>


<h2 id="画面を作ってみる">画面を作ってみる</h2>

<h3 id="背景画像を配置">背景画像を配置</h3>

<p>右下の方にあるリストの中にある「Image View」を対象のView Controlerにドラッグアンドドロップ<br/>
→広い画面で見ていてドラッグアンドドロップができない時は、対象のView Controlerにズームしてからやってみる<br/>
選択した状態で、右上の「Image View」のImageに、先ほどリソースを追加した中に入っている背景画像のファイル名を入力する(bg.pngなど)<br/>
サイズはGUIでも変更できるし、右上のパネル「View」でWidth,Heightを数値で指定することもできる</p>

<h3 id="キャラクターなど画像を配置">キャラクターなど画像を配置</h3>

<p>先ほどと同じ要領でキャラクターの画像を配置する</p>

<h3 id="ボタンを配置する">ボタンを配置する</h3>

<p>右下の方にあるリストの中にある「Round Rect Bottun」を対象のView Controlerにドラッグアンドドロップ<br/>
ダブルクリックするとボタンに表示されている文字を変更できる</p>

<h3 id="もう一つ同じ画面を作ってつないでみる">もう一つ同じ画面を作ってつないでみる</h3>

<p>同じ要領でView Controlerを右側に追加する<br/>
→吹き出しのImageや「戻る」ボタンを追加しておく</p>

<h3 id="modal(画面の上に新たに画面を重ねていく画面遷移方法)で左の画面と右の画面をつなぐ">modal(画面の上に新たに画面を重ねていく画面遷移方法)で左の画面と右の画面をつなぐ</h3>

<p>左の画面上に配置したボタンをCtrlを押しながらクリックし、右の画面にドラッグアンドドロップする<br/>
メニューが出るので「modal」を選択する</p>

<p>※ここでシミュレータを実行してボタンを押すと、次の画面に遷移する</p>

<h2 id="クラスを作る">クラスを作る</h2>

<p>戻るボタンを実装するためにクラスを作る</p>

<h3 id="ファイルの作成">ファイルの作成</h3>

<p>File -> New -> File<br/>
Objective-C class を選択</p>

<ul>
<li>Class : MainViewControler</li>
<li>Subclass of : UIViewControler
Targeted for iPadなどのチェックボックスるが外れていることを確認する<br/>
対象のフォルダが選択されていること、対象のプロジェクトにチェックが入っていることを確認してCreate<br/>
同じ要領でClass SubViewControlerを作成する</li>
</ul>


<h4 id="MainViewControler.mの編集">MainViewControler.mの編集</h4>

<p>以下を何処かにコピペ
<code>
- (IBAction)mainViewReturnActionForSegue:
(UIStoryboardSegue *)segue{
NSLog(@"もどってきた！");
}
</code></p>

<h4 id="MainStoryboardで設定">MainStoryboardで設定</h4>

<p>後の画面に設置した「戻る」ボタンをCtrlを押しながらMainViewの「exit」にドラッグアンドドロップする<br/>
→出てきたメニューで先ほど追加した</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(第31回)Python mini Hack-a-thon]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/05/18/python-mini-hack-a-thon/"/>
    <updated>2013-05-18T11:37:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/05/18/python-mini-hack-a-thon</id>
    <content type="html"><![CDATA[<p>おのおのが好きな事を好きなようにやるハッカソン。
実際に自分の手を動かすのは楽しいですね。</p>

<h2 id="ストレージ拡張自動化システム検討">ストレージ拡張自動化システム検討</h2>

<p>日本人のみ相手に仕事をしている場合は、わからないことがあれば話をしながら進めることができるが、
海外も視野に入れると時差も休日も言語も違い、これを話しながら進めるのは現実的ではない。</p>

<p>Webフォームから値を入力するとバッチ処理で自動的にストレージ(NAS)の拡張ができるシステム構築を目指す。</p>

<p><img class="center" src="https://dl.dropboxusercontent.com/u/37468049/PythonSystem.png"></p>

<ul>
<li><p>Webサーバ<br/>
Pythonのフレームワークを利用してWebの入力フォームを作成。
NAS名やボリューム名、拡張サイズを入力する。</p></li>
<li><p>バッチサーバ<br/>
cronなどジョブスケジューラーを利用してWebフォームで入力された値に従ってバッチ処理を行う。<br/>
fabricを利用予定。</p></li>
<li><p>NAS管理サーバ<br/>
既存のNASを管理しているサーバ。こちらには新たに設定を追加せず、fabricを利用して
バッチサーバからssh経由で送られてきたコマンドを自動で実行するようにしたい。</p></li>
<li><p>NASサーバ<br/>
拡張対象のNASサーバ</p></li>
</ul>


<h2 id="バッチサーバ">バッチサーバ</h2>

<h3 id="[fabricインストール](http://ftakao2007.github.io/blog//2013/04/06/fabric/)"><a href="http://ftakao2007.github.io/blog//2013/04/06/fabric/">fabricインストール</a></h3>

<p>Amazon Linuxは以下でインストール可能</p>

<p><code>bash
sudo su
yum -y install python python-devel gcc
curl http://python-distribute.org/distribute_setup.py | python
curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python
pip install fabric fexpect
exit
</code></p>

<h3 id="Python自動実行スクリプト作成">Python自動実行スクリプト作成</h3>

<ul>
<li><a href="https://github.com/ftakao2007/python_json">python_json (github)</a></li>
</ul>


<p>まだfabricは絡んでおらず、printでコマンドを書き出しているのみ。</p>

<p>jsonファイル中身
``` bash NAS_param.json
[</p>

<pre><code>{
    "nas": "(NAS Name)",
    "volume": "(Volume Name)",
    "size": "(Volume size)"
},
{
    "nas": "nas_backup01",
    "volume": "apache_log",
    "size": "+5g"
},
{
    "nas": "nas_backup02",
    "volume": "tomcat_log",
    "size": "+500m"
},
{
    "nas": "nas_ecsite01",
    "volume": "item_image",
    "size": "+10g"
}
</code></pre>

<p>]
```</p>

<p>これを読み込んで処理する。</p>

<p>``` python read_NAS_param.py</p>

<h1 id="!/usr/bin/python">!/usr/bin/python</h1>

<h1 id="coding:+utf-8">coding: utf-8</h1>

<p>import json # jsonを扱うため
import sys  # モジュール属性 argv を取得するため</p>

<p>argvs = sys.argv  # コマンドライン引数を格納したリストの取得
argc = len(argvs) # 引数の個数</p>

<p>f = open("NAS_param.json")  # jsonファイルを読み込む
data = json.load(f)         # jsonデータを読み込んだファイルオブジェクトからPythonデータを作成
f.close()                   # ファイルを閉じる</p>

<p>num = len(data)             #ファイル数をカウント</p>

<p>if argc == 2 and argvs[1] == "--help":</p>

<pre><code>print( "sudo ssh {obj[nas]} vol resize {obj[volume]} {obj[size]}".format(obj = data[0]) )    # ヘルプを表示
</code></pre>

<p>if argc == 1:</p>

<pre><code>for i in range(num)[1:]:     # 配列の2列目から実行
    print( "sudo ssh {obj[nas]} vol resize {obj[volume]} {obj[size]}".format(obj = data[i]) )
</code></pre>

<p>※ デバッグ等コメントは削除
<code>``
ハッカソン中は引数が無いとエラーになっていたが、上記のように</code>argc == 2 and`を追加するとうまく実行できるようになった。</p>

<p>以下実行結果
``` bash
fukui-no-MacBook-Air:python_json ftakao2007$ ./read_NAS_param.py --help
sudo ssh (NAS Name) vol create (Volume Name) (Volume size)</p>

<p>fukui-no-MacBook-Air:python_json ftakao2007$ ./read_NAS_param.py
sudo ssh nas_backup01 vol create apache_log 5g
sudo ssh nas_backup02 vol create tomcat_log 500m
sudo ssh nas_ecsite01 vol create item_image 10g
```
Helpも実行結果も問題なく表示された。</p>

<h2 id="Webサーバ">Webサーバ</h2>

<h3 id="w3mインストール">w3mインストール</h3>

<p>動作確認用
<code>bash
yum install w3m
</code></p>

<h3 id="Bottle+インストール">Bottle インストール</h3>

<p>Djangoが難しかったのでこっちを使ってみた</p>

<ul>
<li><a href="http://mojix.org/2013/01/04/python-bottle">Pythonを始めるなら、１ファイルの軽量Webフレームワーク「Bottle」がおすすめ</a></li>
</ul>


<p>```bash
wget https://pypi.python.org/packages/source/b/bottle/bottle-0.11.4.tar.gz
tar zxvf cd bottle-0.11.4.tar.gz
cd bottle-0.11.4</p>

<h1 id="vi+hello.py">vi hello.py</h1>

<p>from bottle import route, run</p>

<p>@route('/hello')
def hello():
  return "Hello World!"</p>

<h1 id="run(host='localhost',+port=8080,+debug=True)">run(host='localhost', port=8080, debug=True)</h1>

<p>python hello.py &amp;
w3m http://localhost:8080/hello
```
以下のようにするとPCのWebブラウザからリモートアクセスできた。</p>

<p><code>bash
run(host='ec2-XXX-XXX-XXX-XXX.ap-northeast-1.compute.amazonaws.com', port=80, debug=True)
sudo python hello.py  #この場合はsudoで実行
</code></p>

<hr />

<p>※ 以下挫折中 ※</p>

<h2 id="httpdインストール">httpdインストール</h2>

<p><code>bash
sudo yum -y update
sudo yum -y install httpd
</code></p>

<h2 id="Django+インストール">Django インストール</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/CortYuming/20120503/p1">Django1.4 + mod_wsgi 環境構築とりあえずのメモ</a></li>
<li><a href="http://hima-j.in/django/django-setup/">Django のインストールからプロジェクトの作成まで</a>
<code>bash
sudo yum install mod_wsgi
sudo pip install django
sudo mkdir /var/www/html/django
cd /var/www/html/django
sudo django-admin.py startproject mysite
</code></li>
</ul>


<h3 id="開発用サーバの起動と確認">開発用サーバの起動と確認</h3>

<p>SGの設定で8080ポートを開けておく</p>

<p>``` bash
cd mysite
python manage.py runserver 8080 &amp;
w3m http://127.0.0.1:8080</p>

<p>※ 「It worked!」が出れば成功
```</p>

<p>〜つづく〜</p>

<h2 id="その他">その他</h2>

<p>Zaimの家計簿自動入力スクリプトの作成もやりたかった。現在は認証のとろころで詰まってます。ググって自力でできるかなぁ。
できなかったら、次回はその辺やってみて有識者の知恵を拝借できればと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第4回 iphoneアプリ開発超初心者講習会]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/05/15/iphone-app-study/"/>
    <updated>2013-05-15T19:56:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/05/15/iphone-app-study</id>
    <content type="html"><![CDATA[<h2 id="[第4回+iphoneアプリ開発超初心者講習会](http://atnd.org/event/E0015173)"><a href="http://atnd.org/event/E0015173">第4回 iphoneアプリ開発超初心者講習会</a></h2>

<p>この講習会ではじめてXcodeでiOS用プログラミングをしました。
概要のまとめです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第17回 granpark.rb 「データ解析技術入門(R言語編)」]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/05/11/granpark-17th/"/>
    <updated>2013-05-11T12:52:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/05/11/granpark-17th</id>
    <content type="html"><![CDATA[<p><a href="http://www.zusaar.com/event/670003">第17回 granpark.rb 「データ解析技術入門(R言語編)」</a></p>

<h2 id="値代入">値代入</h2>

<p>```</p>

<blockquote><p>a &lt;- 5
d &lt;- "abc"</p>

<p>a
[1] 5</p>

<p>d
[1] "abc"
```
代入には「=」も使えるが、Rは慣例的に「&lt;-」を使う。</p></blockquote>

<h2 id="ベクトル計算">ベクトル計算</h2>

<p>「c」を使う
```</p>

<blockquote><p>a &lt;- c(1,2,3)
a
[1] 1 2 3
b &lt;- c(4,5,6)
a+b
[1] 5 7 9
```</p></blockquote>

<h2 id="行列計算">行列計算</h2>

<p>「matrix」を使う<br/>
3行4列の行列に1から12までの数値が入っている例
```</p>

<blockquote><p>matrix(1:12,3,4)</p>

<pre><code> [,1] [,2] [,3] [,4]
</code></pre>

<p>[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12</p>

<p>a &lt;- matrix(1:12,3,4)
a</p>

<pre><code> [,1] [,2] [,3] [,4]
</code></pre>

<p>[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12</p>

<p>a[1,]
[1]  1  4  7 10</p>

<p>a[,1]
[1] 1 2 3</p>

<p>a[1,1]
[1] 1</p>

<p>a[1,1] * a[1,2]
[1] 4</p>

<p>a[3,1] * a[1,2]
[1] 12
```</p></blockquote>

<h2 id="irisを使ったRの基本的利用方法">irisを使ったRの基本的利用方法</h2>

<p>アヤメのガクヘン(蕚片)と花びらに関するデータ</p>

<p>```</p>

<blockquote><p>iris</p>

<pre><code>Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
</code></pre>

<p>1            5.1         3.5          1.4         0.2     setosa
2            4.9         3.0          1.4         0.2     setosa
...</p>

<p>summary(iris)
  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width<br/>
 Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100
 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300
 Median :5.800   Median :3.000   Median :4.350   Median :1.300
 Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199
 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800
 Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500</p>

<pre><code>   Species 
</code></pre>

<p> setosa    :50
 versicolor:50
 virginica :50</p>

<p>sum(iris[,1])  合計
[1] 876.5</p>

<p>mean(iris[,1])　平均
[1] 5.843333</p>

<p>sd(iris[,1])　　標準偏差
[1] 0.8280661</p>

<p>max(iris[,1])　最大
[1] 7.9</p>

<p>min(iris[,1])　最小
[1] 4.3</p>

<p>str(iris[,1])
 num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...</p>

<p>str(iris)　データに関する情報
'data.frame':     150 obs. of  5 variables:
 $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
 $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
 $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
 $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
 $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 …</p></blockquote>

<p>data.frame…変数の型
```</p>

<h2 id="図形描画">図形描画</h2>

<p>```</p>

<blockquote><p>plot(iris[,1],iris[,3])</p>

<p>plot(iris)</p>

<p>pairs(iris[1:4], pch=21, bg=c("red", "green3","blue"))
```</p></blockquote>

<h2 id="相関を見る">相関を見る</h2>

<p>```</p>

<blockquote><p>cor(iris[,1:4])</p>

<pre><code>         Sepal.Length Sepal.Width Petal.Length Petal.Width
</code></pre>

<p>Sepal.Length    1.0000000  -0.1175698    0.8717538   0.8179411
Sepal.Width    -0.1175698   1.0000000   -0.4284401  -0.3661259
Petal.Length    0.8717538  -0.4284401    1.0000000   0.9628654
Petal.Width     0.8179411  -0.3661259    0.9628654   1.0000000</p></blockquote>

<p>```
同じ値は1になる</p>

<h2 id="単回帰分析">単回帰分析</h2>

<p>```</p>

<blockquote><p>kaiki &lt;- lm(iris$Petal.Length ~ iris$Sepal.Length)
kaiki</p></blockquote>

<p>Call:
lm(formula = iris$Petal.Length ~ iris$Sepal.Length)</p>

<p>Coefficients:</p>

<pre><code>  (Intercept)  iris$Sepal.Length 
       -7.101              1.858 
</code></pre>

<p>単回帰直線が
y=1.858, x=-7.101
という意味</p>

<blockquote><p>plot(iris$Petal.Length ~ iris$Sepal.Length)
```</p></blockquote>

<h2 id="Rの掟">Rの掟</h2>

<ul>
<li><p>for, if, while, repeat, 添字操作は遅くなるのでなるべくやらない</p></li>
<li><p>添字操作は添字集合による論理判断させる<br/>
添字一つではなく、ある条件の集合体として操作させる<br/>
→それによってできた添字集合は逐次の論理判断と等価</p></li>
</ul>


<h3 id="問題">問題</h3>

<p>```</p>

<blockquote><p>x &lt;- runif(1000000)</p>

<p>test1 &lt;- function() {
+ res &lt;- numeric(1000000)
+ for (i in 1:1000000) res[i] &lt;- exp(x[i])
+ return(res)}
system.time(test1())
   ユーザ   システム       経過</p>

<pre><code> 2.089      0.013      2.102 
</code></pre></blockquote>

<p>```
これを速くする</p>

<h3 id="答え">答え</h3>

<p>```</p>

<blockquote><p>x &lt;- runif(1000000)
system.time(res &lt;-exp(x))
   ユーザ   システム       経過</p>

<pre><code> 0.013      0.002      0.016
</code></pre>

<p>```
できるだけコードを書かずに計算する方法を考えるとだいたい正解</p></blockquote>

<h2 id="Rメモ">Rメモ</h2>

<ul>
<li>C++で実装されている</li>
<li><p>ifやforを使いすぎるとRubyやPerlより遅くなるが、ちゃんとやるとC++くらい速い<br/>
ifやループは使わない事に喜びをおぼえてきたら立派なR使い。<br/>
使うべきところは使ってもよい。</p></li>
<li><p>エクセルより大きなデータを扱える</p></li>
<li>拡張パッケージがいろいろある</li>
<li>メモリー容量内の範囲で使える</li>
<li>「R」は検索しにくい(Rubyとかのほうがヒットする)</li>
<li><p>メガ、ギガクラスの処理はRでよい
→それより大きくなるとHive</p></li>
<li><p>Rstudioを入れると、WebブラウザでRが使える
→エディタや描画や関数など別窓で表示させられる<br/>
→iPadでRが使えるらしい</p></li>
</ul>


<h2 id="その他">その他</h2>

<ul>
<li>何かを計算する場合、テールの部分の情報は必要なのかを考えると良い<br/>
データが全部必要なのか、一部あればよいのか考慮することで計算量を少なくすることができる可能性がある</li>
</ul>

]]></content>
  </entry>
  
</feed>
