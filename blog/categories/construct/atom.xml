<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: construct | Octopress Blog]]></title>
  <link href="http://ftakao2007.github.com/blog/categories/construct/atom.xml" rel="self"/>
  <link href="http://ftakao2007.github.com/"/>
  <updated>2013-04-14T19:55:02+09:00</updated>
  <id>http://ftakao2007.github.com/</id>
  <author>
    <name><![CDATA[ftakao2007]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[chef]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/08/chef/"/>
    <updated>2013-04-08T20:38:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/08/chef</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fabric]]></title>
    <link href="http://ftakao2007.github.com/blog/2013/04/06/fabric/"/>
    <updated>2013-04-06T21:53:00+09:00</updated>
    <id>http://ftakao2007.github.com/blog/2013/04/06/fabric</id>
    <content type="html"><![CDATA[<h1>Fabricインストール</h1>

<h2>CentOS6.4の場合</h2>

<p><code>
su -
bash
yum update
yum -y install python python-devel gcc
curl http://python-distribute.org/distribute_setup.py | python
curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python
pip install fabric fexpect
</code></p>

<p>pycryptoのバージョンによっては、実行時に以下のエラーが出る
<code>
AttributeError: 'module' object has no attribute 'HAVE_DECL_MPZ_POWM_SEC'
</code></p>

<p>pycryptoのバージョンを変更すればよい
<code>
pip uninstall pycrypto
pip install PyCrypto==2.3
</code></p>

<h3>テスト</h3>

<p>``` python fabric_test.py
from fabric.api import *</p>

<p>def host_type() :</p>

<pre><code>run('uname -s')
</code></pre>

<p>```</p>

<p>``` bash
[ftakao2007 script]$ fab -f fabric_test.py -H localhost host_type
[localhost] Executing task 'host_type'
[localhost] run: uname -s
[localhost] Login password for 'ftakao2007':
[localhost] out: Linux
[localhost] out:</p>

<p>Done.
Disconnecting from localhost... done.
[ftakao2007 script]$
```</p>

<h1>EC2で利用する</h1>

<p>インスタンスを作成してsshでアクセスできるところまでは設定済みの想定</p>

<h2>実行方法</h2>

<p>ec2上のユーザ:ec2-user<br/>
ec2のアドレス:10.160.26.123 (仮)<br/>
秘密鍵:hoge.pem</p>

<p>``` bash
[ftakao2007 script]$ fab -f fablic_test.py -i hoge.pem -H ec2-user@10.160.26.123 host_type</p>

<p>[10.160.26.123] Executing task 'host_type'
[10.160.26.123] run: uname -s
[10.160.26.123] out: Linux
[10.160.26.123] out:</p>

<p>Done.
Disconnecting from localhost... done.
```</p>

<h1>テクニック</h1>

<h2>キーボードから入力した値をfabricで利用する</h2>

<p>fabricというよりpythonの使い方かな。。</p>

<p>``` python
name = raw_input('Enter name: ')</p>

<h1>name = "aaa"</h1>

<h1>print name</h1>

<p>def var_test(var=name):</p>

<pre><code>    run("echo {in_var}".format(in_var=var))
</code></pre>

<p>```
※ 「raw_input」のところでnameに入力した値が入る<br/>
※ nameの中身がvar_test関数の中の変数varに代入される<br/>
※ varの中身がin_varに入り、runの中で変数が展開される</p>

<p>``` bash
[ftakao2007 script]$ fab -f fabric_test.py -H localhost var_test
Enter name: hogehoge
[localhost] Executing task 'var_test'
[localhost] run: echo hogehoge
[localhost] Login password for 'ftakao2007':
[localhost] out: hogehoge
[localhost] out:</p>

<p>Done.
Disconnecting from localhost... done.
```</p>

<p>2変数を使う場合
``` python
sei_name = raw_input('Enter family sei_name: ')
na_name = raw_input('Enter first na_name: ')</p>

<p>def var_test(var1=sei_name,var2=na_name):</p>

<pre><code>    run(""" 
    echo {in_var1} {in_var2}
    """.format(in_var1=var1,in_var2=var2))
</code></pre>

<p>```</p>

<p>``` bash
[ftakao2007 script]$ fab -f fabric_test.py -H localhost var_test
Enter family sei_name: yamada
Enter first na_name: taro
[localhost] Executing task 'var_test'
[localhost] run:</p>

<pre><code>echo yamada taro
</code></pre>

<p>[localhost] Login password for 'ftakao2007':
[localhost] out: yamada taro
[localhost] out:</p>

<p>Done.
Disconnecting from localhost... done.
```</p>

<h1>リンク</h1>

<p><a href="http://www.slideshare.net/tafujish/hbstudy41-auto-scalingv13">FablicとMonitを使ってオートスケーリングを自作してみよう</a></p>
]]></content>
  </entry>
  
</feed>
